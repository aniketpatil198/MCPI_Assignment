
Day07Assignment1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e14  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08000fa4  08000fa4  00001fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fec  08000fec  00002050  2**0
                  CONTENTS
  4 .ARM          00000008  08000fec  08000fec  00001fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000ff4  08000ff4  00002050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ff4  08000ff4  00001ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ff8  08000ff8  00001ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08000ffc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002050  2**0
                  CONTENTS
 10 .bss          0000016c  20000050  20000050  00002050  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00002050  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001435  00000000  00000000  0000207a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000629  00000000  00000000  000034af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000118  00000000  00000000  00003ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000b7  00000000  00000000  00003bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000145e  00000000  00000000  00003ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000019ac  00000000  00000000  00005105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c4e4  00000000  00000000  00006ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00092f95  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000007c0  00000000  00000000  00092fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  00093798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000058  00000000  00000000  000937b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000050 	.word	0x20000050
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08000f8c 	.word	0x08000f8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000054 	.word	0x20000054
 80001cc:	08000f8c 	.word	0x08000f8c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
	SystemInit();
 8000276:	f000 f8f1 	bl	800045c <SystemInit>
	//LedInit(LED_ORANGE);
	//LcdInit();
	UartInit(BAUD_9600);
 800027a:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 800027e:	f000 f923 	bl	80004c8 <UartInit>
	SwitchInit(SWITCH);
 8000282:	2000      	movs	r0, #0
 8000284:	f000 f83e 	bl	8000304 <SwitchInit>
	int cnt = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	617b      	str	r3, [r7, #20]

	char str[16];
	UartPuts("COUNT\n");
 800028c:	480c      	ldr	r0, [pc, #48]	@ (80002c0 <main+0x50>)
 800028e:	f000 f99f 	bl	80005d0 <UartPuts>
	while(1) {
		// wait until switch interrupt generated
		while(exti0_flag == 0)
 8000292:	bf00      	nop
 8000294:	4b0b      	ldr	r3, [pc, #44]	@ (80002c4 <main+0x54>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d0fb      	beq.n	8000294 <main+0x24>
			;

		sprintf(str, "\rCOUNT=%d",cnt);
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	697a      	ldr	r2, [r7, #20]
 80002a0:	4909      	ldr	r1, [pc, #36]	@ (80002c8 <main+0x58>)
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 f9da 	bl	800065c <siprintf>
		UartPuts(str);
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 f990 	bl	80005d0 <UartPuts>
		cnt++;
 80002b0:	697b      	ldr	r3, [r7, #20]
 80002b2:	3301      	adds	r3, #1
 80002b4:	617b      	str	r3, [r7, #20]

		exti0_flag = 0;
 80002b6:	4b03      	ldr	r3, [pc, #12]	@ (80002c4 <main+0x54>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
		while(exti0_flag == 0)
 80002bc:	e7e9      	b.n	8000292 <main+0x22>
 80002be:	bf00      	nop
 80002c0:	08000fa4 	.word	0x08000fa4
 80002c4:	2000006c 	.word	0x2000006c
 80002c8:	08000fac 	.word	0x08000fac

080002cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	db0b      	blt.n	80002f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	f003 021f 	and.w	r2, r3, #31
 80002e4:	4906      	ldr	r1, [pc, #24]	@ (8000300 <__NVIC_EnableIRQ+0x34>)
 80002e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ea:	095b      	lsrs	r3, r3, #5
 80002ec:	2001      	movs	r0, #1
 80002ee:	fa00 f202 	lsl.w	r2, r0, r2
 80002f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	e000e100 	.word	0xe000e100

08000304 <SwitchInit>:
#include "switch.h"

void SwitchInit(uint32_t pin) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	// enable gpio clock (in AHB1ENR)
	RCC->AHB1ENR |= BV(SWITCH_GPIO_EN);
 800030c:	4b2a      	ldr	r3, [pc, #168]	@ (80003b8 <SwitchInit+0xb4>)
 800030e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000310:	4a29      	ldr	r2, [pc, #164]	@ (80003b8 <SwitchInit+0xb4>)
 8000312:	f043 0301 	orr.w	r3, r3, #1
 8000316:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pin as input (in MODER)
	SWITCH_GPIO->MODER &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000318:	4b28      	ldr	r3, [pc, #160]	@ (80003bc <SwitchInit+0xb8>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	687a      	ldr	r2, [r7, #4]
 800031e:	0052      	lsls	r2, r2, #1
 8000320:	3201      	adds	r2, #1
 8000322:	2101      	movs	r1, #1
 8000324:	4091      	lsls	r1, r2
 8000326:	687a      	ldr	r2, [r7, #4]
 8000328:	0052      	lsls	r2, r2, #1
 800032a:	2001      	movs	r0, #1
 800032c:	fa00 f202 	lsl.w	r2, r0, r2
 8000330:	430a      	orrs	r2, r1
 8000332:	43d2      	mvns	r2, r2
 8000334:	4611      	mov	r1, r2
 8000336:	4a21      	ldr	r2, [pc, #132]	@ (80003bc <SwitchInit+0xb8>)
 8000338:	400b      	ands	r3, r1
 800033a:	6013      	str	r3, [r2, #0]
	// set gpio pin speed to low (in OSPEEDR)
	SWITCH_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 800033c:	4b1f      	ldr	r3, [pc, #124]	@ (80003bc <SwitchInit+0xb8>)
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	0052      	lsls	r2, r2, #1
 8000344:	3201      	adds	r2, #1
 8000346:	2101      	movs	r1, #1
 8000348:	4091      	lsls	r1, r2
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	0052      	lsls	r2, r2, #1
 800034e:	2001      	movs	r0, #1
 8000350:	fa00 f202 	lsl.w	r2, r0, r2
 8000354:	430a      	orrs	r2, r1
 8000356:	43d2      	mvns	r2, r2
 8000358:	4611      	mov	r1, r2
 800035a:	4a18      	ldr	r2, [pc, #96]	@ (80003bc <SwitchInit+0xb8>)
 800035c:	400b      	ands	r3, r1
 800035e:	6093      	str	r3, [r2, #8]
	// set gpio pin no pull up, no pull down (in PUPDR)
	SWITCH_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000360:	4b16      	ldr	r3, [pc, #88]	@ (80003bc <SwitchInit+0xb8>)
 8000362:	68db      	ldr	r3, [r3, #12]
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	0052      	lsls	r2, r2, #1
 8000368:	3201      	adds	r2, #1
 800036a:	2101      	movs	r1, #1
 800036c:	4091      	lsls	r1, r2
 800036e:	687a      	ldr	r2, [r7, #4]
 8000370:	0052      	lsls	r2, r2, #1
 8000372:	2001      	movs	r0, #1
 8000374:	fa00 f202 	lsl.w	r2, r0, r2
 8000378:	430a      	orrs	r2, r1
 800037a:	43d2      	mvns	r2, r2
 800037c:	4611      	mov	r1, r2
 800037e:	4a0f      	ldr	r2, [pc, #60]	@ (80003bc <SwitchInit+0xb8>)
 8000380:	400b      	ands	r3, r1
 8000382:	60d3      	str	r3, [r2, #12]
	// enable falling edge detection (in FTSR)
	EXTI->FTSR |= BV(SWITCH);
 8000384:	4b0e      	ldr	r3, [pc, #56]	@ (80003c0 <SwitchInit+0xbc>)
 8000386:	68db      	ldr	r3, [r3, #12]
 8000388:	4a0d      	ldr	r2, [pc, #52]	@ (80003c0 <SwitchInit+0xbc>)
 800038a:	f043 0301 	orr.w	r3, r3, #1
 800038e:	60d3      	str	r3, [r2, #12]
	// enable (unmask) exti interrupt (in IMR)
	EXTI->IMR |= BV(SWITCH);
 8000390:	4b0b      	ldr	r3, [pc, #44]	@ (80003c0 <SwitchInit+0xbc>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a0a      	ldr	r2, [pc, #40]	@ (80003c0 <SwitchInit+0xbc>)
 8000396:	f043 0301 	orr.w	r3, r3, #1
 800039a:	6013      	str	r3, [r2, #0]
	// select exti interrupt (in SYSCFG->EXTICRx)
	SYSCFG->EXTICR[0] &= ~(BV(3) | BV(2) | BV(1) | BV(0));
 800039c:	4b09      	ldr	r3, [pc, #36]	@ (80003c4 <SwitchInit+0xc0>)
 800039e:	689b      	ldr	r3, [r3, #8]
 80003a0:	4a08      	ldr	r2, [pc, #32]	@ (80003c4 <SwitchInit+0xc0>)
 80003a2:	f023 030f 	bic.w	r3, r3, #15
 80003a6:	6093      	str	r3, [r2, #8]
	// enable exti in NVIC (ISER or NVIC_EnableIRQ())
	//NVIC->ISER[0] |= BV(EXTI0_IRQn);
	NVIC_EnableIRQ(EXTI0_IRQn);
 80003a8:	2006      	movs	r0, #6
 80003aa:	f7ff ff8f 	bl	80002cc <__NVIC_EnableIRQ>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40023800 	.word	0x40023800
 80003bc:	40020000 	.word	0x40020000
 80003c0:	40013c00 	.word	0x40013c00
 80003c4:	40013800 	.word	0x40013800

080003c8 <EXTI0_IRQHandler>:

// Global flag for interrupt
volatile int exti0_flag = 0;

// Switch EXTT0 IRQ Handler
void EXTI0_IRQHandler(void) {
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
    // Acknowledge interrupt (in PR)
	EXTI->PR |= BV(SWITCH);
 80003cc:	4b06      	ldr	r3, [pc, #24]	@ (80003e8 <EXTI0_IRQHandler+0x20>)
 80003ce:	695b      	ldr	r3, [r3, #20]
 80003d0:	4a05      	ldr	r2, [pc, #20]	@ (80003e8 <EXTI0_IRQHandler+0x20>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6153      	str	r3, [r2, #20]
	// Handle interrupt
	exti0_flag = 1;
 80003d8:	4b04      	ldr	r3, [pc, #16]	@ (80003ec <EXTI0_IRQHandler+0x24>)
 80003da:	2201      	movs	r2, #1
 80003dc:	601a      	str	r2, [r3, #0]
}
 80003de:	bf00      	nop
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bc80      	pop	{r7}
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40013c00 	.word	0x40013c00
 80003ec:	2000006c 	.word	0x2000006c

080003f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b086      	sub	sp, #24
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003f8:	4a14      	ldr	r2, [pc, #80]	@ (800044c <_sbrk+0x5c>)
 80003fa:	4b15      	ldr	r3, [pc, #84]	@ (8000450 <_sbrk+0x60>)
 80003fc:	1ad3      	subs	r3, r2, r3
 80003fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000404:	4b13      	ldr	r3, [pc, #76]	@ (8000454 <_sbrk+0x64>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d102      	bne.n	8000412 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800040c:	4b11      	ldr	r3, [pc, #68]	@ (8000454 <_sbrk+0x64>)
 800040e:	4a12      	ldr	r2, [pc, #72]	@ (8000458 <_sbrk+0x68>)
 8000410:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000412:	4b10      	ldr	r3, [pc, #64]	@ (8000454 <_sbrk+0x64>)
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4413      	add	r3, r2
 800041a:	693a      	ldr	r2, [r7, #16]
 800041c:	429a      	cmp	r2, r3
 800041e:	d207      	bcs.n	8000430 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000420:	f000 f93c 	bl	800069c <__errno>
 8000424:	4603      	mov	r3, r0
 8000426:	220c      	movs	r2, #12
 8000428:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800042a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800042e:	e009      	b.n	8000444 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000430:	4b08      	ldr	r3, [pc, #32]	@ (8000454 <_sbrk+0x64>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000436:	4b07      	ldr	r3, [pc, #28]	@ (8000454 <_sbrk+0x64>)
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4413      	add	r3, r2
 800043e:	4a05      	ldr	r2, [pc, #20]	@ (8000454 <_sbrk+0x64>)
 8000440:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000442:	68fb      	ldr	r3, [r7, #12]
}
 8000444:	4618      	mov	r0, r3
 8000446:	3718      	adds	r7, #24
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20020000 	.word	0x20020000
 8000450:	00000400 	.word	0x00000400
 8000454:	20000070 	.word	0x20000070
 8000458:	200001c0 	.word	0x200001c0

0800045c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  DWT_Init();
 8000460:	f000 f802 	bl	8000468 <DWT_Init>
}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}

08000468 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800046c:	4b14      	ldr	r3, [pc, #80]	@ (80004c0 <DWT_Init+0x58>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	4a13      	ldr	r2, [pc, #76]	@ (80004c0 <DWT_Init+0x58>)
 8000472:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000476:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000478:	4b11      	ldr	r3, [pc, #68]	@ (80004c0 <DWT_Init+0x58>)
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	4a10      	ldr	r2, [pc, #64]	@ (80004c0 <DWT_Init+0x58>)
 800047e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000482:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000484:	4b0f      	ldr	r3, [pc, #60]	@ (80004c4 <DWT_Init+0x5c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a0e      	ldr	r2, [pc, #56]	@ (80004c4 <DWT_Init+0x5c>)
 800048a:	f023 0301 	bic.w	r3, r3, #1
 800048e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000490:	4b0c      	ldr	r3, [pc, #48]	@ (80004c4 <DWT_Init+0x5c>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a0b      	ldr	r2, [pc, #44]	@ (80004c4 <DWT_Init+0x5c>)
 8000496:	f043 0301 	orr.w	r3, r3, #1
 800049a:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800049c:	4b09      	ldr	r3, [pc, #36]	@ (80004c4 <DWT_Init+0x5c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80004a2:	bf00      	nop
    __ASM volatile ("NOP");
 80004a4:	bf00      	nop
    __ASM volatile ("NOP");
 80004a6:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80004a8:	4b06      	ldr	r3, [pc, #24]	@ (80004c4 <DWT_Init+0x5c>)
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	bf0c      	ite	eq
 80004b0:	2301      	moveq	r3, #1
 80004b2:	2300      	movne	r3, #0
 80004b4:	b2db      	uxtb	r3, r3
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	e000edf0 	.word	0xe000edf0
 80004c4:	e0001000 	.word	0xe0001000

080004c8 <UartInit>:

#define TX_PIN	2
#define RX_PIN	3
#define USART_ALT_FN	7

void UartInit(uint32_t baud) {
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	// UART GPIO Init -- PA.2 (Tx) and PA.3 (Rx)
	// enable clock
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 80004d0:	4b31      	ldr	r3, [pc, #196]	@ (8000598 <UartInit+0xd0>)
 80004d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d4:	4a30      	ldr	r2, [pc, #192]	@ (8000598 <UartInit+0xd0>)
 80004d6:	f043 0301 	orr.w	r3, r3, #1
 80004da:	6313      	str	r3, [r2, #48]	@ 0x30
	//	alt fn = 0111 = 7 (Uart Tx and Rx)
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 80004dc:	4b2f      	ldr	r3, [pc, #188]	@ (800059c <UartInit+0xd4>)
 80004de:	6a1b      	ldr	r3, [r3, #32]
 80004e0:	4a2e      	ldr	r2, [pc, #184]	@ (800059c <UartInit+0xd4>)
 80004e2:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80004e6:	6213      	str	r3, [r2, #32]
	// 	mode=10 (alt fn), speed=00 (low), pupdr=00 (none), typer=0 (push-pull)
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 80004e8:	4b2c      	ldr	r3, [pc, #176]	@ (800059c <UartInit+0xd4>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a2b      	ldr	r2, [pc, #172]	@ (800059c <UartInit+0xd4>)
 80004ee:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80004f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 80004f4:	4b29      	ldr	r3, [pc, #164]	@ (800059c <UartInit+0xd4>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a28      	ldr	r2, [pc, #160]	@ (800059c <UartInit+0xd4>)
 80004fa:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 80004fe:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000500:	4b26      	ldr	r3, [pc, #152]	@ (800059c <UartInit+0xd4>)
 8000502:	689b      	ldr	r3, [r3, #8]
 8000504:	4a25      	ldr	r2, [pc, #148]	@ (800059c <UartInit+0xd4>)
 8000506:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800050a:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 800050c:	4b23      	ldr	r3, [pc, #140]	@ (800059c <UartInit+0xd4>)
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	4a22      	ldr	r2, [pc, #136]	@ (800059c <UartInit+0xd4>)
 8000512:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000516:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 8000518:	4b20      	ldr	r3, [pc, #128]	@ (800059c <UartInit+0xd4>)
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	4a1f      	ldr	r2, [pc, #124]	@ (800059c <UartInit+0xd4>)
 800051e:	f023 030c 	bic.w	r3, r3, #12
 8000522:	6053      	str	r3, [r2, #4]

	// UART Config
	// enable uart clock
	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 8000524:	4b1c      	ldr	r3, [pc, #112]	@ (8000598 <UartInit+0xd0>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000528:	4a1b      	ldr	r2, [pc, #108]	@ (8000598 <UartInit+0xd0>)
 800052a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800052e:	6413      	str	r3, [r2, #64]	@ 0x40
	// tx en (TE=1), rx en (RE=1), wordlen=8 (M=0), OVER8=0, disable parity (PCE=0)
	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 8000530:	4b1b      	ldr	r3, [pc, #108]	@ (80005a0 <UartInit+0xd8>)
 8000532:	220c      	movs	r2, #12
 8000534:	60da      	str	r2, [r3, #12]
	// 1 stop bit (STOP=00), disable clock (CLKEN=0)
	USART2->CR2 = 0x00000000;
 8000536:	4b1a      	ldr	r3, [pc, #104]	@ (80005a0 <UartInit+0xd8>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
	// no hw control, no irda, no dma, no interupts
	USART2->CR3 = 0x00000000;
 800053c:	4b18      	ldr	r3, [pc, #96]	@ (80005a0 <UartInit+0xd8>)
 800053e:	2200      	movs	r2, #0
 8000540:	615a      	str	r2, [r3, #20]
	// set BRR for given baud rate
	switch(baud) {
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000548:	d016      	beq.n	8000578 <UartInit+0xb0>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000550:	d816      	bhi.n	8000580 <UartInit+0xb8>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000558:	d004      	beq.n	8000564 <UartInit+0x9c>
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000560:	d005      	beq.n	800056e <UartInit+0xa6>
 8000562:	e00d      	b.n	8000580 <UartInit+0xb8>
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 8000564:	4b0e      	ldr	r3, [pc, #56]	@ (80005a0 <UartInit+0xd8>)
 8000566:	f240 6283 	movw	r2, #1667	@ 0x683
 800056a:	609a      	str	r2, [r3, #8]
			break;
 800056c:	e008      	b.n	8000580 <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 800056e:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <UartInit+0xd8>)
 8000570:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000574:	609a      	str	r2, [r3, #8]
			break;
 8000576:	e003      	b.n	8000580 <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 8000578:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <UartInit+0xd8>)
 800057a:	228b      	movs	r2, #139	@ 0x8b
 800057c:	609a      	str	r2, [r3, #8]
			break;
 800057e:	bf00      	nop
	}
	// uart enable (UE=1)
	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 8000580:	4b07      	ldr	r3, [pc, #28]	@ (80005a0 <UartInit+0xd8>)
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	4a06      	ldr	r2, [pc, #24]	@ (80005a0 <UartInit+0xd8>)
 8000586:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800058a:	60d3      	str	r3, [r2, #12]
}
 800058c:	bf00      	nop
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40023800 	.word	0x40023800
 800059c:	40020000 	.word	0x40020000
 80005a0:	40004400 	.word	0x40004400

080005a4 <UartPutch>:

void UartPutch(uint8_t ch) {
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
	// wait until TDR is empty (i.e. prev byte transmitted)
	while((USART2->SR & BV(USART_SR_TXE_Pos)) == 0)
 80005ae:	bf00      	nop
 80005b0:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <UartPutch+0x28>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0f9      	beq.n	80005b0 <UartPutch+0xc>
		;
	// write new byte in TDR
	USART2->DR = ch;
 80005bc:	4a03      	ldr	r2, [pc, #12]	@ (80005cc <UartPutch+0x28>)
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	6053      	str	r3, [r2, #4]
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	40004400 	.word	0x40004400

080005d0 <UartPuts>:
	// read received byte from RDR
	char ch = USART2->DR;
	return ch;
}

void UartPuts(char str[]) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0; str[i]!='\0'; i++)
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	e009      	b.n	80005f2 <UartPuts+0x22>
		UartPutch(str[i]);
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	4413      	add	r3, r2
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ffdc 	bl	80005a4 <UartPutch>
	for(i=0; str[i]!='\0'; i++)
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	3301      	adds	r3, #1
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	4413      	add	r3, r2
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d1ef      	bne.n	80005de <UartPuts+0xe>
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000608:	480d      	ldr	r0, [pc, #52]	@ (8000640 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800060a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800060c:	f7ff ff26 	bl	800045c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000610:	480c      	ldr	r0, [pc, #48]	@ (8000644 <LoopForever+0x6>)
  ldr r1, =_edata
 8000612:	490d      	ldr	r1, [pc, #52]	@ (8000648 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000614:	4a0d      	ldr	r2, [pc, #52]	@ (800064c <LoopForever+0xe>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000618:	e002      	b.n	8000620 <LoopCopyDataInit>

0800061a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800061c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061e:	3304      	adds	r3, #4

08000620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000624:	d3f9      	bcc.n	800061a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000626:	4a0a      	ldr	r2, [pc, #40]	@ (8000650 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000628:	4c0a      	ldr	r4, [pc, #40]	@ (8000654 <LoopForever+0x16>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800062c:	e001      	b.n	8000632 <LoopFillZerobss>

0800062e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000630:	3204      	adds	r2, #4

08000632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000634:	d3fb      	bcc.n	800062e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000636:	f000 f837 	bl	80006a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063a:	f7ff fe19 	bl	8000270 <main>

0800063e <LoopForever>:

LoopForever:
  b LoopForever
 800063e:	e7fe      	b.n	800063e <LoopForever>
  ldr   r0, =_estack
 8000640:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000648:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 800064c:	08000ffc 	.word	0x08000ffc
  ldr r2, =_sbss
 8000650:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000654:	200001bc 	.word	0x200001bc

08000658 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000658:	e7fe      	b.n	8000658 <ADC_IRQHandler>
	...

0800065c <siprintf>:
 800065c:	b40e      	push	{r1, r2, r3}
 800065e:	b500      	push	{lr}
 8000660:	b09c      	sub	sp, #112	@ 0x70
 8000662:	ab1d      	add	r3, sp, #116	@ 0x74
 8000664:	9002      	str	r0, [sp, #8]
 8000666:	9006      	str	r0, [sp, #24]
 8000668:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800066c:	4809      	ldr	r0, [pc, #36]	@ (8000694 <siprintf+0x38>)
 800066e:	9107      	str	r1, [sp, #28]
 8000670:	9104      	str	r1, [sp, #16]
 8000672:	4909      	ldr	r1, [pc, #36]	@ (8000698 <siprintf+0x3c>)
 8000674:	f853 2b04 	ldr.w	r2, [r3], #4
 8000678:	9105      	str	r1, [sp, #20]
 800067a:	6800      	ldr	r0, [r0, #0]
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	a902      	add	r1, sp, #8
 8000680:	f000 f98c 	bl	800099c <_svfiprintf_r>
 8000684:	9b02      	ldr	r3, [sp, #8]
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
 800068a:	b01c      	add	sp, #112	@ 0x70
 800068c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000690:	b003      	add	sp, #12
 8000692:	4770      	bx	lr
 8000694:	20000000 	.word	0x20000000
 8000698:	ffff0208 	.word	0xffff0208

0800069c <__errno>:
 800069c:	4b01      	ldr	r3, [pc, #4]	@ (80006a4 <__errno+0x8>)
 800069e:	6818      	ldr	r0, [r3, #0]
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	20000000 	.word	0x20000000

080006a8 <__libc_init_array>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	4d0d      	ldr	r5, [pc, #52]	@ (80006e0 <__libc_init_array+0x38>)
 80006ac:	4c0d      	ldr	r4, [pc, #52]	@ (80006e4 <__libc_init_array+0x3c>)
 80006ae:	1b64      	subs	r4, r4, r5
 80006b0:	10a4      	asrs	r4, r4, #2
 80006b2:	2600      	movs	r6, #0
 80006b4:	42a6      	cmp	r6, r4
 80006b6:	d109      	bne.n	80006cc <__libc_init_array+0x24>
 80006b8:	4d0b      	ldr	r5, [pc, #44]	@ (80006e8 <__libc_init_array+0x40>)
 80006ba:	4c0c      	ldr	r4, [pc, #48]	@ (80006ec <__libc_init_array+0x44>)
 80006bc:	f000 fc66 	bl	8000f8c <_init>
 80006c0:	1b64      	subs	r4, r4, r5
 80006c2:	10a4      	asrs	r4, r4, #2
 80006c4:	2600      	movs	r6, #0
 80006c6:	42a6      	cmp	r6, r4
 80006c8:	d105      	bne.n	80006d6 <__libc_init_array+0x2e>
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80006d0:	4798      	blx	r3
 80006d2:	3601      	adds	r6, #1
 80006d4:	e7ee      	b.n	80006b4 <__libc_init_array+0xc>
 80006d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80006da:	4798      	blx	r3
 80006dc:	3601      	adds	r6, #1
 80006de:	e7f2      	b.n	80006c6 <__libc_init_array+0x1e>
 80006e0:	08000ff4 	.word	0x08000ff4
 80006e4:	08000ff4 	.word	0x08000ff4
 80006e8:	08000ff4 	.word	0x08000ff4
 80006ec:	08000ff8 	.word	0x08000ff8

080006f0 <__retarget_lock_acquire_recursive>:
 80006f0:	4770      	bx	lr

080006f2 <__retarget_lock_release_recursive>:
 80006f2:	4770      	bx	lr

080006f4 <_free_r>:
 80006f4:	b538      	push	{r3, r4, r5, lr}
 80006f6:	4605      	mov	r5, r0
 80006f8:	2900      	cmp	r1, #0
 80006fa:	d041      	beq.n	8000780 <_free_r+0x8c>
 80006fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000700:	1f0c      	subs	r4, r1, #4
 8000702:	2b00      	cmp	r3, #0
 8000704:	bfb8      	it	lt
 8000706:	18e4      	addlt	r4, r4, r3
 8000708:	f000 f8e0 	bl	80008cc <__malloc_lock>
 800070c:	4a1d      	ldr	r2, [pc, #116]	@ (8000784 <_free_r+0x90>)
 800070e:	6813      	ldr	r3, [r2, #0]
 8000710:	b933      	cbnz	r3, 8000720 <_free_r+0x2c>
 8000712:	6063      	str	r3, [r4, #4]
 8000714:	6014      	str	r4, [r2, #0]
 8000716:	4628      	mov	r0, r5
 8000718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800071c:	f000 b8dc 	b.w	80008d8 <__malloc_unlock>
 8000720:	42a3      	cmp	r3, r4
 8000722:	d908      	bls.n	8000736 <_free_r+0x42>
 8000724:	6820      	ldr	r0, [r4, #0]
 8000726:	1821      	adds	r1, r4, r0
 8000728:	428b      	cmp	r3, r1
 800072a:	bf01      	itttt	eq
 800072c:	6819      	ldreq	r1, [r3, #0]
 800072e:	685b      	ldreq	r3, [r3, #4]
 8000730:	1809      	addeq	r1, r1, r0
 8000732:	6021      	streq	r1, [r4, #0]
 8000734:	e7ed      	b.n	8000712 <_free_r+0x1e>
 8000736:	461a      	mov	r2, r3
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	b10b      	cbz	r3, 8000740 <_free_r+0x4c>
 800073c:	42a3      	cmp	r3, r4
 800073e:	d9fa      	bls.n	8000736 <_free_r+0x42>
 8000740:	6811      	ldr	r1, [r2, #0]
 8000742:	1850      	adds	r0, r2, r1
 8000744:	42a0      	cmp	r0, r4
 8000746:	d10b      	bne.n	8000760 <_free_r+0x6c>
 8000748:	6820      	ldr	r0, [r4, #0]
 800074a:	4401      	add	r1, r0
 800074c:	1850      	adds	r0, r2, r1
 800074e:	4283      	cmp	r3, r0
 8000750:	6011      	str	r1, [r2, #0]
 8000752:	d1e0      	bne.n	8000716 <_free_r+0x22>
 8000754:	6818      	ldr	r0, [r3, #0]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	6053      	str	r3, [r2, #4]
 800075a:	4408      	add	r0, r1
 800075c:	6010      	str	r0, [r2, #0]
 800075e:	e7da      	b.n	8000716 <_free_r+0x22>
 8000760:	d902      	bls.n	8000768 <_free_r+0x74>
 8000762:	230c      	movs	r3, #12
 8000764:	602b      	str	r3, [r5, #0]
 8000766:	e7d6      	b.n	8000716 <_free_r+0x22>
 8000768:	6820      	ldr	r0, [r4, #0]
 800076a:	1821      	adds	r1, r4, r0
 800076c:	428b      	cmp	r3, r1
 800076e:	bf04      	itt	eq
 8000770:	6819      	ldreq	r1, [r3, #0]
 8000772:	685b      	ldreq	r3, [r3, #4]
 8000774:	6063      	str	r3, [r4, #4]
 8000776:	bf04      	itt	eq
 8000778:	1809      	addeq	r1, r1, r0
 800077a:	6021      	streq	r1, [r4, #0]
 800077c:	6054      	str	r4, [r2, #4]
 800077e:	e7ca      	b.n	8000716 <_free_r+0x22>
 8000780:	bd38      	pop	{r3, r4, r5, pc}
 8000782:	bf00      	nop
 8000784:	200001b8 	.word	0x200001b8

08000788 <sbrk_aligned>:
 8000788:	b570      	push	{r4, r5, r6, lr}
 800078a:	4e0f      	ldr	r6, [pc, #60]	@ (80007c8 <sbrk_aligned+0x40>)
 800078c:	460c      	mov	r4, r1
 800078e:	6831      	ldr	r1, [r6, #0]
 8000790:	4605      	mov	r5, r0
 8000792:	b911      	cbnz	r1, 800079a <sbrk_aligned+0x12>
 8000794:	f000 fba6 	bl	8000ee4 <_sbrk_r>
 8000798:	6030      	str	r0, [r6, #0]
 800079a:	4621      	mov	r1, r4
 800079c:	4628      	mov	r0, r5
 800079e:	f000 fba1 	bl	8000ee4 <_sbrk_r>
 80007a2:	1c43      	adds	r3, r0, #1
 80007a4:	d103      	bne.n	80007ae <sbrk_aligned+0x26>
 80007a6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80007aa:	4620      	mov	r0, r4
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	1cc4      	adds	r4, r0, #3
 80007b0:	f024 0403 	bic.w	r4, r4, #3
 80007b4:	42a0      	cmp	r0, r4
 80007b6:	d0f8      	beq.n	80007aa <sbrk_aligned+0x22>
 80007b8:	1a21      	subs	r1, r4, r0
 80007ba:	4628      	mov	r0, r5
 80007bc:	f000 fb92 	bl	8000ee4 <_sbrk_r>
 80007c0:	3001      	adds	r0, #1
 80007c2:	d1f2      	bne.n	80007aa <sbrk_aligned+0x22>
 80007c4:	e7ef      	b.n	80007a6 <sbrk_aligned+0x1e>
 80007c6:	bf00      	nop
 80007c8:	200001b4 	.word	0x200001b4

080007cc <_malloc_r>:
 80007cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007d0:	1ccd      	adds	r5, r1, #3
 80007d2:	f025 0503 	bic.w	r5, r5, #3
 80007d6:	3508      	adds	r5, #8
 80007d8:	2d0c      	cmp	r5, #12
 80007da:	bf38      	it	cc
 80007dc:	250c      	movcc	r5, #12
 80007de:	2d00      	cmp	r5, #0
 80007e0:	4606      	mov	r6, r0
 80007e2:	db01      	blt.n	80007e8 <_malloc_r+0x1c>
 80007e4:	42a9      	cmp	r1, r5
 80007e6:	d904      	bls.n	80007f2 <_malloc_r+0x26>
 80007e8:	230c      	movs	r3, #12
 80007ea:	6033      	str	r3, [r6, #0]
 80007ec:	2000      	movs	r0, #0
 80007ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80008c8 <_malloc_r+0xfc>
 80007f6:	f000 f869 	bl	80008cc <__malloc_lock>
 80007fa:	f8d8 3000 	ldr.w	r3, [r8]
 80007fe:	461c      	mov	r4, r3
 8000800:	bb44      	cbnz	r4, 8000854 <_malloc_r+0x88>
 8000802:	4629      	mov	r1, r5
 8000804:	4630      	mov	r0, r6
 8000806:	f7ff ffbf 	bl	8000788 <sbrk_aligned>
 800080a:	1c43      	adds	r3, r0, #1
 800080c:	4604      	mov	r4, r0
 800080e:	d158      	bne.n	80008c2 <_malloc_r+0xf6>
 8000810:	f8d8 4000 	ldr.w	r4, [r8]
 8000814:	4627      	mov	r7, r4
 8000816:	2f00      	cmp	r7, #0
 8000818:	d143      	bne.n	80008a2 <_malloc_r+0xd6>
 800081a:	2c00      	cmp	r4, #0
 800081c:	d04b      	beq.n	80008b6 <_malloc_r+0xea>
 800081e:	6823      	ldr	r3, [r4, #0]
 8000820:	4639      	mov	r1, r7
 8000822:	4630      	mov	r0, r6
 8000824:	eb04 0903 	add.w	r9, r4, r3
 8000828:	f000 fb5c 	bl	8000ee4 <_sbrk_r>
 800082c:	4581      	cmp	r9, r0
 800082e:	d142      	bne.n	80008b6 <_malloc_r+0xea>
 8000830:	6821      	ldr	r1, [r4, #0]
 8000832:	1a6d      	subs	r5, r5, r1
 8000834:	4629      	mov	r1, r5
 8000836:	4630      	mov	r0, r6
 8000838:	f7ff ffa6 	bl	8000788 <sbrk_aligned>
 800083c:	3001      	adds	r0, #1
 800083e:	d03a      	beq.n	80008b6 <_malloc_r+0xea>
 8000840:	6823      	ldr	r3, [r4, #0]
 8000842:	442b      	add	r3, r5
 8000844:	6023      	str	r3, [r4, #0]
 8000846:	f8d8 3000 	ldr.w	r3, [r8]
 800084a:	685a      	ldr	r2, [r3, #4]
 800084c:	bb62      	cbnz	r2, 80008a8 <_malloc_r+0xdc>
 800084e:	f8c8 7000 	str.w	r7, [r8]
 8000852:	e00f      	b.n	8000874 <_malloc_r+0xa8>
 8000854:	6822      	ldr	r2, [r4, #0]
 8000856:	1b52      	subs	r2, r2, r5
 8000858:	d420      	bmi.n	800089c <_malloc_r+0xd0>
 800085a:	2a0b      	cmp	r2, #11
 800085c:	d917      	bls.n	800088e <_malloc_r+0xc2>
 800085e:	1961      	adds	r1, r4, r5
 8000860:	42a3      	cmp	r3, r4
 8000862:	6025      	str	r5, [r4, #0]
 8000864:	bf18      	it	ne
 8000866:	6059      	strne	r1, [r3, #4]
 8000868:	6863      	ldr	r3, [r4, #4]
 800086a:	bf08      	it	eq
 800086c:	f8c8 1000 	streq.w	r1, [r8]
 8000870:	5162      	str	r2, [r4, r5]
 8000872:	604b      	str	r3, [r1, #4]
 8000874:	4630      	mov	r0, r6
 8000876:	f000 f82f 	bl	80008d8 <__malloc_unlock>
 800087a:	f104 000b 	add.w	r0, r4, #11
 800087e:	1d23      	adds	r3, r4, #4
 8000880:	f020 0007 	bic.w	r0, r0, #7
 8000884:	1ac2      	subs	r2, r0, r3
 8000886:	bf1c      	itt	ne
 8000888:	1a1b      	subne	r3, r3, r0
 800088a:	50a3      	strne	r3, [r4, r2]
 800088c:	e7af      	b.n	80007ee <_malloc_r+0x22>
 800088e:	6862      	ldr	r2, [r4, #4]
 8000890:	42a3      	cmp	r3, r4
 8000892:	bf0c      	ite	eq
 8000894:	f8c8 2000 	streq.w	r2, [r8]
 8000898:	605a      	strne	r2, [r3, #4]
 800089a:	e7eb      	b.n	8000874 <_malloc_r+0xa8>
 800089c:	4623      	mov	r3, r4
 800089e:	6864      	ldr	r4, [r4, #4]
 80008a0:	e7ae      	b.n	8000800 <_malloc_r+0x34>
 80008a2:	463c      	mov	r4, r7
 80008a4:	687f      	ldr	r7, [r7, #4]
 80008a6:	e7b6      	b.n	8000816 <_malloc_r+0x4a>
 80008a8:	461a      	mov	r2, r3
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	42a3      	cmp	r3, r4
 80008ae:	d1fb      	bne.n	80008a8 <_malloc_r+0xdc>
 80008b0:	2300      	movs	r3, #0
 80008b2:	6053      	str	r3, [r2, #4]
 80008b4:	e7de      	b.n	8000874 <_malloc_r+0xa8>
 80008b6:	230c      	movs	r3, #12
 80008b8:	6033      	str	r3, [r6, #0]
 80008ba:	4630      	mov	r0, r6
 80008bc:	f000 f80c 	bl	80008d8 <__malloc_unlock>
 80008c0:	e794      	b.n	80007ec <_malloc_r+0x20>
 80008c2:	6005      	str	r5, [r0, #0]
 80008c4:	e7d6      	b.n	8000874 <_malloc_r+0xa8>
 80008c6:	bf00      	nop
 80008c8:	200001b8 	.word	0x200001b8

080008cc <__malloc_lock>:
 80008cc:	4801      	ldr	r0, [pc, #4]	@ (80008d4 <__malloc_lock+0x8>)
 80008ce:	f7ff bf0f 	b.w	80006f0 <__retarget_lock_acquire_recursive>
 80008d2:	bf00      	nop
 80008d4:	200001b0 	.word	0x200001b0

080008d8 <__malloc_unlock>:
 80008d8:	4801      	ldr	r0, [pc, #4]	@ (80008e0 <__malloc_unlock+0x8>)
 80008da:	f7ff bf0a 	b.w	80006f2 <__retarget_lock_release_recursive>
 80008de:	bf00      	nop
 80008e0:	200001b0 	.word	0x200001b0

080008e4 <__ssputs_r>:
 80008e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e8:	688e      	ldr	r6, [r1, #8]
 80008ea:	461f      	mov	r7, r3
 80008ec:	42be      	cmp	r6, r7
 80008ee:	680b      	ldr	r3, [r1, #0]
 80008f0:	4682      	mov	sl, r0
 80008f2:	460c      	mov	r4, r1
 80008f4:	4690      	mov	r8, r2
 80008f6:	d82d      	bhi.n	8000954 <__ssputs_r+0x70>
 80008f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80008fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000900:	d026      	beq.n	8000950 <__ssputs_r+0x6c>
 8000902:	6965      	ldr	r5, [r4, #20]
 8000904:	6909      	ldr	r1, [r1, #16]
 8000906:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800090a:	eba3 0901 	sub.w	r9, r3, r1
 800090e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000912:	1c7b      	adds	r3, r7, #1
 8000914:	444b      	add	r3, r9
 8000916:	106d      	asrs	r5, r5, #1
 8000918:	429d      	cmp	r5, r3
 800091a:	bf38      	it	cc
 800091c:	461d      	movcc	r5, r3
 800091e:	0553      	lsls	r3, r2, #21
 8000920:	d527      	bpl.n	8000972 <__ssputs_r+0x8e>
 8000922:	4629      	mov	r1, r5
 8000924:	f7ff ff52 	bl	80007cc <_malloc_r>
 8000928:	4606      	mov	r6, r0
 800092a:	b360      	cbz	r0, 8000986 <__ssputs_r+0xa2>
 800092c:	6921      	ldr	r1, [r4, #16]
 800092e:	464a      	mov	r2, r9
 8000930:	f000 fae8 	bl	8000f04 <memcpy>
 8000934:	89a3      	ldrh	r3, [r4, #12]
 8000936:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800093a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800093e:	81a3      	strh	r3, [r4, #12]
 8000940:	6126      	str	r6, [r4, #16]
 8000942:	6165      	str	r5, [r4, #20]
 8000944:	444e      	add	r6, r9
 8000946:	eba5 0509 	sub.w	r5, r5, r9
 800094a:	6026      	str	r6, [r4, #0]
 800094c:	60a5      	str	r5, [r4, #8]
 800094e:	463e      	mov	r6, r7
 8000950:	42be      	cmp	r6, r7
 8000952:	d900      	bls.n	8000956 <__ssputs_r+0x72>
 8000954:	463e      	mov	r6, r7
 8000956:	6820      	ldr	r0, [r4, #0]
 8000958:	4632      	mov	r2, r6
 800095a:	4641      	mov	r1, r8
 800095c:	f000 faa8 	bl	8000eb0 <memmove>
 8000960:	68a3      	ldr	r3, [r4, #8]
 8000962:	1b9b      	subs	r3, r3, r6
 8000964:	60a3      	str	r3, [r4, #8]
 8000966:	6823      	ldr	r3, [r4, #0]
 8000968:	4433      	add	r3, r6
 800096a:	6023      	str	r3, [r4, #0]
 800096c:	2000      	movs	r0, #0
 800096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000972:	462a      	mov	r2, r5
 8000974:	f000 fad4 	bl	8000f20 <_realloc_r>
 8000978:	4606      	mov	r6, r0
 800097a:	2800      	cmp	r0, #0
 800097c:	d1e0      	bne.n	8000940 <__ssputs_r+0x5c>
 800097e:	6921      	ldr	r1, [r4, #16]
 8000980:	4650      	mov	r0, sl
 8000982:	f7ff feb7 	bl	80006f4 <_free_r>
 8000986:	230c      	movs	r3, #12
 8000988:	f8ca 3000 	str.w	r3, [sl]
 800098c:	89a3      	ldrh	r3, [r4, #12]
 800098e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000992:	81a3      	strh	r3, [r4, #12]
 8000994:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000998:	e7e9      	b.n	800096e <__ssputs_r+0x8a>
	...

0800099c <_svfiprintf_r>:
 800099c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009a0:	4698      	mov	r8, r3
 80009a2:	898b      	ldrh	r3, [r1, #12]
 80009a4:	061b      	lsls	r3, r3, #24
 80009a6:	b09d      	sub	sp, #116	@ 0x74
 80009a8:	4607      	mov	r7, r0
 80009aa:	460d      	mov	r5, r1
 80009ac:	4614      	mov	r4, r2
 80009ae:	d510      	bpl.n	80009d2 <_svfiprintf_r+0x36>
 80009b0:	690b      	ldr	r3, [r1, #16]
 80009b2:	b973      	cbnz	r3, 80009d2 <_svfiprintf_r+0x36>
 80009b4:	2140      	movs	r1, #64	@ 0x40
 80009b6:	f7ff ff09 	bl	80007cc <_malloc_r>
 80009ba:	6028      	str	r0, [r5, #0]
 80009bc:	6128      	str	r0, [r5, #16]
 80009be:	b930      	cbnz	r0, 80009ce <_svfiprintf_r+0x32>
 80009c0:	230c      	movs	r3, #12
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009c8:	b01d      	add	sp, #116	@ 0x74
 80009ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009ce:	2340      	movs	r3, #64	@ 0x40
 80009d0:	616b      	str	r3, [r5, #20]
 80009d2:	2300      	movs	r3, #0
 80009d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80009d6:	2320      	movs	r3, #32
 80009d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80009dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80009e0:	2330      	movs	r3, #48	@ 0x30
 80009e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000b80 <_svfiprintf_r+0x1e4>
 80009e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80009ea:	f04f 0901 	mov.w	r9, #1
 80009ee:	4623      	mov	r3, r4
 80009f0:	469a      	mov	sl, r3
 80009f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80009f6:	b10a      	cbz	r2, 80009fc <_svfiprintf_r+0x60>
 80009f8:	2a25      	cmp	r2, #37	@ 0x25
 80009fa:	d1f9      	bne.n	80009f0 <_svfiprintf_r+0x54>
 80009fc:	ebba 0b04 	subs.w	fp, sl, r4
 8000a00:	d00b      	beq.n	8000a1a <_svfiprintf_r+0x7e>
 8000a02:	465b      	mov	r3, fp
 8000a04:	4622      	mov	r2, r4
 8000a06:	4629      	mov	r1, r5
 8000a08:	4638      	mov	r0, r7
 8000a0a:	f7ff ff6b 	bl	80008e4 <__ssputs_r>
 8000a0e:	3001      	adds	r0, #1
 8000a10:	f000 80a7 	beq.w	8000b62 <_svfiprintf_r+0x1c6>
 8000a14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000a16:	445a      	add	r2, fp
 8000a18:	9209      	str	r2, [sp, #36]	@ 0x24
 8000a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f000 809f 	beq.w	8000b62 <_svfiprintf_r+0x1c6>
 8000a24:	2300      	movs	r3, #0
 8000a26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000a2e:	f10a 0a01 	add.w	sl, sl, #1
 8000a32:	9304      	str	r3, [sp, #16]
 8000a34:	9307      	str	r3, [sp, #28]
 8000a36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000a3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8000a3c:	4654      	mov	r4, sl
 8000a3e:	2205      	movs	r2, #5
 8000a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a44:	484e      	ldr	r0, [pc, #312]	@ (8000b80 <_svfiprintf_r+0x1e4>)
 8000a46:	f7ff fbc3 	bl	80001d0 <memchr>
 8000a4a:	9a04      	ldr	r2, [sp, #16]
 8000a4c:	b9d8      	cbnz	r0, 8000a86 <_svfiprintf_r+0xea>
 8000a4e:	06d0      	lsls	r0, r2, #27
 8000a50:	bf44      	itt	mi
 8000a52:	2320      	movmi	r3, #32
 8000a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a58:	0711      	lsls	r1, r2, #28
 8000a5a:	bf44      	itt	mi
 8000a5c:	232b      	movmi	r3, #43	@ 0x2b
 8000a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a62:	f89a 3000 	ldrb.w	r3, [sl]
 8000a66:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a68:	d015      	beq.n	8000a96 <_svfiprintf_r+0xfa>
 8000a6a:	9a07      	ldr	r2, [sp, #28]
 8000a6c:	4654      	mov	r4, sl
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f04f 0c0a 	mov.w	ip, #10
 8000a74:	4621      	mov	r1, r4
 8000a76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000a7a:	3b30      	subs	r3, #48	@ 0x30
 8000a7c:	2b09      	cmp	r3, #9
 8000a7e:	d94b      	bls.n	8000b18 <_svfiprintf_r+0x17c>
 8000a80:	b1b0      	cbz	r0, 8000ab0 <_svfiprintf_r+0x114>
 8000a82:	9207      	str	r2, [sp, #28]
 8000a84:	e014      	b.n	8000ab0 <_svfiprintf_r+0x114>
 8000a86:	eba0 0308 	sub.w	r3, r0, r8
 8000a8a:	fa09 f303 	lsl.w	r3, r9, r3
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	9304      	str	r3, [sp, #16]
 8000a92:	46a2      	mov	sl, r4
 8000a94:	e7d2      	b.n	8000a3c <_svfiprintf_r+0xa0>
 8000a96:	9b03      	ldr	r3, [sp, #12]
 8000a98:	1d19      	adds	r1, r3, #4
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	9103      	str	r1, [sp, #12]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	bfbb      	ittet	lt
 8000aa2:	425b      	neglt	r3, r3
 8000aa4:	f042 0202 	orrlt.w	r2, r2, #2
 8000aa8:	9307      	strge	r3, [sp, #28]
 8000aaa:	9307      	strlt	r3, [sp, #28]
 8000aac:	bfb8      	it	lt
 8000aae:	9204      	strlt	r2, [sp, #16]
 8000ab0:	7823      	ldrb	r3, [r4, #0]
 8000ab2:	2b2e      	cmp	r3, #46	@ 0x2e
 8000ab4:	d10a      	bne.n	8000acc <_svfiprintf_r+0x130>
 8000ab6:	7863      	ldrb	r3, [r4, #1]
 8000ab8:	2b2a      	cmp	r3, #42	@ 0x2a
 8000aba:	d132      	bne.n	8000b22 <_svfiprintf_r+0x186>
 8000abc:	9b03      	ldr	r3, [sp, #12]
 8000abe:	1d1a      	adds	r2, r3, #4
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	9203      	str	r2, [sp, #12]
 8000ac4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000ac8:	3402      	adds	r4, #2
 8000aca:	9305      	str	r3, [sp, #20]
 8000acc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000b84 <_svfiprintf_r+0x1e8>
 8000ad0:	7821      	ldrb	r1, [r4, #0]
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	4650      	mov	r0, sl
 8000ad6:	f7ff fb7b 	bl	80001d0 <memchr>
 8000ada:	b138      	cbz	r0, 8000aec <_svfiprintf_r+0x150>
 8000adc:	9b04      	ldr	r3, [sp, #16]
 8000ade:	eba0 000a 	sub.w	r0, r0, sl
 8000ae2:	2240      	movs	r2, #64	@ 0x40
 8000ae4:	4082      	lsls	r2, r0
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	3401      	adds	r4, #1
 8000aea:	9304      	str	r3, [sp, #16]
 8000aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000af0:	4825      	ldr	r0, [pc, #148]	@ (8000b88 <_svfiprintf_r+0x1ec>)
 8000af2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000af6:	2206      	movs	r2, #6
 8000af8:	f7ff fb6a 	bl	80001d0 <memchr>
 8000afc:	2800      	cmp	r0, #0
 8000afe:	d036      	beq.n	8000b6e <_svfiprintf_r+0x1d2>
 8000b00:	4b22      	ldr	r3, [pc, #136]	@ (8000b8c <_svfiprintf_r+0x1f0>)
 8000b02:	bb1b      	cbnz	r3, 8000b4c <_svfiprintf_r+0x1b0>
 8000b04:	9b03      	ldr	r3, [sp, #12]
 8000b06:	3307      	adds	r3, #7
 8000b08:	f023 0307 	bic.w	r3, r3, #7
 8000b0c:	3308      	adds	r3, #8
 8000b0e:	9303      	str	r3, [sp, #12]
 8000b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000b12:	4433      	add	r3, r6
 8000b14:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b16:	e76a      	b.n	80009ee <_svfiprintf_r+0x52>
 8000b18:	fb0c 3202 	mla	r2, ip, r2, r3
 8000b1c:	460c      	mov	r4, r1
 8000b1e:	2001      	movs	r0, #1
 8000b20:	e7a8      	b.n	8000a74 <_svfiprintf_r+0xd8>
 8000b22:	2300      	movs	r3, #0
 8000b24:	3401      	adds	r4, #1
 8000b26:	9305      	str	r3, [sp, #20]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f04f 0c0a 	mov.w	ip, #10
 8000b2e:	4620      	mov	r0, r4
 8000b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b34:	3a30      	subs	r2, #48	@ 0x30
 8000b36:	2a09      	cmp	r2, #9
 8000b38:	d903      	bls.n	8000b42 <_svfiprintf_r+0x1a6>
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0c6      	beq.n	8000acc <_svfiprintf_r+0x130>
 8000b3e:	9105      	str	r1, [sp, #20]
 8000b40:	e7c4      	b.n	8000acc <_svfiprintf_r+0x130>
 8000b42:	fb0c 2101 	mla	r1, ip, r1, r2
 8000b46:	4604      	mov	r4, r0
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e7f0      	b.n	8000b2e <_svfiprintf_r+0x192>
 8000b4c:	ab03      	add	r3, sp, #12
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	462a      	mov	r2, r5
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <_svfiprintf_r+0x1f4>)
 8000b54:	a904      	add	r1, sp, #16
 8000b56:	4638      	mov	r0, r7
 8000b58:	f3af 8000 	nop.w
 8000b5c:	1c42      	adds	r2, r0, #1
 8000b5e:	4606      	mov	r6, r0
 8000b60:	d1d6      	bne.n	8000b10 <_svfiprintf_r+0x174>
 8000b62:	89ab      	ldrh	r3, [r5, #12]
 8000b64:	065b      	lsls	r3, r3, #25
 8000b66:	f53f af2d 	bmi.w	80009c4 <_svfiprintf_r+0x28>
 8000b6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000b6c:	e72c      	b.n	80009c8 <_svfiprintf_r+0x2c>
 8000b6e:	ab03      	add	r3, sp, #12
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	462a      	mov	r2, r5
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <_svfiprintf_r+0x1f4>)
 8000b76:	a904      	add	r1, sp, #16
 8000b78:	4638      	mov	r0, r7
 8000b7a:	f000 f879 	bl	8000c70 <_printf_i>
 8000b7e:	e7ed      	b.n	8000b5c <_svfiprintf_r+0x1c0>
 8000b80:	08000fb6 	.word	0x08000fb6
 8000b84:	08000fbc 	.word	0x08000fbc
 8000b88:	08000fc0 	.word	0x08000fc0
 8000b8c:	00000000 	.word	0x00000000
 8000b90:	080008e5 	.word	0x080008e5

08000b94 <_printf_common>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	4616      	mov	r6, r2
 8000b9a:	4698      	mov	r8, r3
 8000b9c:	688a      	ldr	r2, [r1, #8]
 8000b9e:	690b      	ldr	r3, [r1, #16]
 8000ba0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	bfb8      	it	lt
 8000ba8:	4613      	movlt	r3, r2
 8000baa:	6033      	str	r3, [r6, #0]
 8000bac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000bb0:	4607      	mov	r7, r0
 8000bb2:	460c      	mov	r4, r1
 8000bb4:	b10a      	cbz	r2, 8000bba <_printf_common+0x26>
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	6033      	str	r3, [r6, #0]
 8000bba:	6823      	ldr	r3, [r4, #0]
 8000bbc:	0699      	lsls	r1, r3, #26
 8000bbe:	bf42      	ittt	mi
 8000bc0:	6833      	ldrmi	r3, [r6, #0]
 8000bc2:	3302      	addmi	r3, #2
 8000bc4:	6033      	strmi	r3, [r6, #0]
 8000bc6:	6825      	ldr	r5, [r4, #0]
 8000bc8:	f015 0506 	ands.w	r5, r5, #6
 8000bcc:	d106      	bne.n	8000bdc <_printf_common+0x48>
 8000bce:	f104 0a19 	add.w	sl, r4, #25
 8000bd2:	68e3      	ldr	r3, [r4, #12]
 8000bd4:	6832      	ldr	r2, [r6, #0]
 8000bd6:	1a9b      	subs	r3, r3, r2
 8000bd8:	42ab      	cmp	r3, r5
 8000bda:	dc26      	bgt.n	8000c2a <_printf_common+0x96>
 8000bdc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000be0:	6822      	ldr	r2, [r4, #0]
 8000be2:	3b00      	subs	r3, #0
 8000be4:	bf18      	it	ne
 8000be6:	2301      	movne	r3, #1
 8000be8:	0692      	lsls	r2, r2, #26
 8000bea:	d42b      	bmi.n	8000c44 <_printf_common+0xb0>
 8000bec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000bf0:	4641      	mov	r1, r8
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	47c8      	blx	r9
 8000bf6:	3001      	adds	r0, #1
 8000bf8:	d01e      	beq.n	8000c38 <_printf_common+0xa4>
 8000bfa:	6823      	ldr	r3, [r4, #0]
 8000bfc:	6922      	ldr	r2, [r4, #16]
 8000bfe:	f003 0306 	and.w	r3, r3, #6
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	bf02      	ittt	eq
 8000c06:	68e5      	ldreq	r5, [r4, #12]
 8000c08:	6833      	ldreq	r3, [r6, #0]
 8000c0a:	1aed      	subeq	r5, r5, r3
 8000c0c:	68a3      	ldr	r3, [r4, #8]
 8000c0e:	bf0c      	ite	eq
 8000c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000c14:	2500      	movne	r5, #0
 8000c16:	4293      	cmp	r3, r2
 8000c18:	bfc4      	itt	gt
 8000c1a:	1a9b      	subgt	r3, r3, r2
 8000c1c:	18ed      	addgt	r5, r5, r3
 8000c1e:	2600      	movs	r6, #0
 8000c20:	341a      	adds	r4, #26
 8000c22:	42b5      	cmp	r5, r6
 8000c24:	d11a      	bne.n	8000c5c <_printf_common+0xc8>
 8000c26:	2000      	movs	r0, #0
 8000c28:	e008      	b.n	8000c3c <_printf_common+0xa8>
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	4652      	mov	r2, sl
 8000c2e:	4641      	mov	r1, r8
 8000c30:	4638      	mov	r0, r7
 8000c32:	47c8      	blx	r9
 8000c34:	3001      	adds	r0, #1
 8000c36:	d103      	bne.n	8000c40 <_printf_common+0xac>
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c40:	3501      	adds	r5, #1
 8000c42:	e7c6      	b.n	8000bd2 <_printf_common+0x3e>
 8000c44:	18e1      	adds	r1, r4, r3
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	2030      	movs	r0, #48	@ 0x30
 8000c4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000c4e:	4422      	add	r2, r4
 8000c50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000c54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000c58:	3302      	adds	r3, #2
 8000c5a:	e7c7      	b.n	8000bec <_printf_common+0x58>
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	4622      	mov	r2, r4
 8000c60:	4641      	mov	r1, r8
 8000c62:	4638      	mov	r0, r7
 8000c64:	47c8      	blx	r9
 8000c66:	3001      	adds	r0, #1
 8000c68:	d0e6      	beq.n	8000c38 <_printf_common+0xa4>
 8000c6a:	3601      	adds	r6, #1
 8000c6c:	e7d9      	b.n	8000c22 <_printf_common+0x8e>
	...

08000c70 <_printf_i>:
 8000c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c74:	7e0f      	ldrb	r7, [r1, #24]
 8000c76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000c78:	2f78      	cmp	r7, #120	@ 0x78
 8000c7a:	4691      	mov	r9, r2
 8000c7c:	4680      	mov	r8, r0
 8000c7e:	460c      	mov	r4, r1
 8000c80:	469a      	mov	sl, r3
 8000c82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000c86:	d807      	bhi.n	8000c98 <_printf_i+0x28>
 8000c88:	2f62      	cmp	r7, #98	@ 0x62
 8000c8a:	d80a      	bhi.n	8000ca2 <_printf_i+0x32>
 8000c8c:	2f00      	cmp	r7, #0
 8000c8e:	f000 80d2 	beq.w	8000e36 <_printf_i+0x1c6>
 8000c92:	2f58      	cmp	r7, #88	@ 0x58
 8000c94:	f000 80b9 	beq.w	8000e0a <_printf_i+0x19a>
 8000c98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000c9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000ca0:	e03a      	b.n	8000d18 <_printf_i+0xa8>
 8000ca2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000ca6:	2b15      	cmp	r3, #21
 8000ca8:	d8f6      	bhi.n	8000c98 <_printf_i+0x28>
 8000caa:	a101      	add	r1, pc, #4	@ (adr r1, 8000cb0 <_printf_i+0x40>)
 8000cac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000cb0:	08000d09 	.word	0x08000d09
 8000cb4:	08000d1d 	.word	0x08000d1d
 8000cb8:	08000c99 	.word	0x08000c99
 8000cbc:	08000c99 	.word	0x08000c99
 8000cc0:	08000c99 	.word	0x08000c99
 8000cc4:	08000c99 	.word	0x08000c99
 8000cc8:	08000d1d 	.word	0x08000d1d
 8000ccc:	08000c99 	.word	0x08000c99
 8000cd0:	08000c99 	.word	0x08000c99
 8000cd4:	08000c99 	.word	0x08000c99
 8000cd8:	08000c99 	.word	0x08000c99
 8000cdc:	08000e1d 	.word	0x08000e1d
 8000ce0:	08000d47 	.word	0x08000d47
 8000ce4:	08000dd7 	.word	0x08000dd7
 8000ce8:	08000c99 	.word	0x08000c99
 8000cec:	08000c99 	.word	0x08000c99
 8000cf0:	08000e3f 	.word	0x08000e3f
 8000cf4:	08000c99 	.word	0x08000c99
 8000cf8:	08000d47 	.word	0x08000d47
 8000cfc:	08000c99 	.word	0x08000c99
 8000d00:	08000c99 	.word	0x08000c99
 8000d04:	08000ddf 	.word	0x08000ddf
 8000d08:	6833      	ldr	r3, [r6, #0]
 8000d0a:	1d1a      	adds	r2, r3, #4
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	6032      	str	r2, [r6, #0]
 8000d10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e09d      	b.n	8000e58 <_printf_i+0x1e8>
 8000d1c:	6833      	ldr	r3, [r6, #0]
 8000d1e:	6820      	ldr	r0, [r4, #0]
 8000d20:	1d19      	adds	r1, r3, #4
 8000d22:	6031      	str	r1, [r6, #0]
 8000d24:	0606      	lsls	r6, r0, #24
 8000d26:	d501      	bpl.n	8000d2c <_printf_i+0xbc>
 8000d28:	681d      	ldr	r5, [r3, #0]
 8000d2a:	e003      	b.n	8000d34 <_printf_i+0xc4>
 8000d2c:	0645      	lsls	r5, r0, #25
 8000d2e:	d5fb      	bpl.n	8000d28 <_printf_i+0xb8>
 8000d30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000d34:	2d00      	cmp	r5, #0
 8000d36:	da03      	bge.n	8000d40 <_printf_i+0xd0>
 8000d38:	232d      	movs	r3, #45	@ 0x2d
 8000d3a:	426d      	negs	r5, r5
 8000d3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000d40:	4859      	ldr	r0, [pc, #356]	@ (8000ea8 <_printf_i+0x238>)
 8000d42:	230a      	movs	r3, #10
 8000d44:	e011      	b.n	8000d6a <_printf_i+0xfa>
 8000d46:	6821      	ldr	r1, [r4, #0]
 8000d48:	6833      	ldr	r3, [r6, #0]
 8000d4a:	0608      	lsls	r0, r1, #24
 8000d4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8000d50:	d402      	bmi.n	8000d58 <_printf_i+0xe8>
 8000d52:	0649      	lsls	r1, r1, #25
 8000d54:	bf48      	it	mi
 8000d56:	b2ad      	uxthmi	r5, r5
 8000d58:	2f6f      	cmp	r7, #111	@ 0x6f
 8000d5a:	4853      	ldr	r0, [pc, #332]	@ (8000ea8 <_printf_i+0x238>)
 8000d5c:	6033      	str	r3, [r6, #0]
 8000d5e:	bf14      	ite	ne
 8000d60:	230a      	movne	r3, #10
 8000d62:	2308      	moveq	r3, #8
 8000d64:	2100      	movs	r1, #0
 8000d66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000d6a:	6866      	ldr	r6, [r4, #4]
 8000d6c:	60a6      	str	r6, [r4, #8]
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	bfa2      	ittt	ge
 8000d72:	6821      	ldrge	r1, [r4, #0]
 8000d74:	f021 0104 	bicge.w	r1, r1, #4
 8000d78:	6021      	strge	r1, [r4, #0]
 8000d7a:	b90d      	cbnz	r5, 8000d80 <_printf_i+0x110>
 8000d7c:	2e00      	cmp	r6, #0
 8000d7e:	d04b      	beq.n	8000e18 <_printf_i+0x1a8>
 8000d80:	4616      	mov	r6, r2
 8000d82:	fbb5 f1f3 	udiv	r1, r5, r3
 8000d86:	fb03 5711 	mls	r7, r3, r1, r5
 8000d8a:	5dc7      	ldrb	r7, [r0, r7]
 8000d8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000d90:	462f      	mov	r7, r5
 8000d92:	42bb      	cmp	r3, r7
 8000d94:	460d      	mov	r5, r1
 8000d96:	d9f4      	bls.n	8000d82 <_printf_i+0x112>
 8000d98:	2b08      	cmp	r3, #8
 8000d9a:	d10b      	bne.n	8000db4 <_printf_i+0x144>
 8000d9c:	6823      	ldr	r3, [r4, #0]
 8000d9e:	07df      	lsls	r7, r3, #31
 8000da0:	d508      	bpl.n	8000db4 <_printf_i+0x144>
 8000da2:	6923      	ldr	r3, [r4, #16]
 8000da4:	6861      	ldr	r1, [r4, #4]
 8000da6:	4299      	cmp	r1, r3
 8000da8:	bfde      	ittt	le
 8000daa:	2330      	movle	r3, #48	@ 0x30
 8000dac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000db0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000db4:	1b92      	subs	r2, r2, r6
 8000db6:	6122      	str	r2, [r4, #16]
 8000db8:	f8cd a000 	str.w	sl, [sp]
 8000dbc:	464b      	mov	r3, r9
 8000dbe:	aa03      	add	r2, sp, #12
 8000dc0:	4621      	mov	r1, r4
 8000dc2:	4640      	mov	r0, r8
 8000dc4:	f7ff fee6 	bl	8000b94 <_printf_common>
 8000dc8:	3001      	adds	r0, #1
 8000dca:	d14a      	bne.n	8000e62 <_printf_i+0x1f2>
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dd0:	b004      	add	sp, #16
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	6823      	ldr	r3, [r4, #0]
 8000dd8:	f043 0320 	orr.w	r3, r3, #32
 8000ddc:	6023      	str	r3, [r4, #0]
 8000dde:	4833      	ldr	r0, [pc, #204]	@ (8000eac <_printf_i+0x23c>)
 8000de0:	2778      	movs	r7, #120	@ 0x78
 8000de2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000de6:	6823      	ldr	r3, [r4, #0]
 8000de8:	6831      	ldr	r1, [r6, #0]
 8000dea:	061f      	lsls	r7, r3, #24
 8000dec:	f851 5b04 	ldr.w	r5, [r1], #4
 8000df0:	d402      	bmi.n	8000df8 <_printf_i+0x188>
 8000df2:	065f      	lsls	r7, r3, #25
 8000df4:	bf48      	it	mi
 8000df6:	b2ad      	uxthmi	r5, r5
 8000df8:	6031      	str	r1, [r6, #0]
 8000dfa:	07d9      	lsls	r1, r3, #31
 8000dfc:	bf44      	itt	mi
 8000dfe:	f043 0320 	orrmi.w	r3, r3, #32
 8000e02:	6023      	strmi	r3, [r4, #0]
 8000e04:	b11d      	cbz	r5, 8000e0e <_printf_i+0x19e>
 8000e06:	2310      	movs	r3, #16
 8000e08:	e7ac      	b.n	8000d64 <_printf_i+0xf4>
 8000e0a:	4827      	ldr	r0, [pc, #156]	@ (8000ea8 <_printf_i+0x238>)
 8000e0c:	e7e9      	b.n	8000de2 <_printf_i+0x172>
 8000e0e:	6823      	ldr	r3, [r4, #0]
 8000e10:	f023 0320 	bic.w	r3, r3, #32
 8000e14:	6023      	str	r3, [r4, #0]
 8000e16:	e7f6      	b.n	8000e06 <_printf_i+0x196>
 8000e18:	4616      	mov	r6, r2
 8000e1a:	e7bd      	b.n	8000d98 <_printf_i+0x128>
 8000e1c:	6833      	ldr	r3, [r6, #0]
 8000e1e:	6825      	ldr	r5, [r4, #0]
 8000e20:	6961      	ldr	r1, [r4, #20]
 8000e22:	1d18      	adds	r0, r3, #4
 8000e24:	6030      	str	r0, [r6, #0]
 8000e26:	062e      	lsls	r6, r5, #24
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	d501      	bpl.n	8000e30 <_printf_i+0x1c0>
 8000e2c:	6019      	str	r1, [r3, #0]
 8000e2e:	e002      	b.n	8000e36 <_printf_i+0x1c6>
 8000e30:	0668      	lsls	r0, r5, #25
 8000e32:	d5fb      	bpl.n	8000e2c <_printf_i+0x1bc>
 8000e34:	8019      	strh	r1, [r3, #0]
 8000e36:	2300      	movs	r3, #0
 8000e38:	6123      	str	r3, [r4, #16]
 8000e3a:	4616      	mov	r6, r2
 8000e3c:	e7bc      	b.n	8000db8 <_printf_i+0x148>
 8000e3e:	6833      	ldr	r3, [r6, #0]
 8000e40:	1d1a      	adds	r2, r3, #4
 8000e42:	6032      	str	r2, [r6, #0]
 8000e44:	681e      	ldr	r6, [r3, #0]
 8000e46:	6862      	ldr	r2, [r4, #4]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	f7ff f9c0 	bl	80001d0 <memchr>
 8000e50:	b108      	cbz	r0, 8000e56 <_printf_i+0x1e6>
 8000e52:	1b80      	subs	r0, r0, r6
 8000e54:	6060      	str	r0, [r4, #4]
 8000e56:	6863      	ldr	r3, [r4, #4]
 8000e58:	6123      	str	r3, [r4, #16]
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e60:	e7aa      	b.n	8000db8 <_printf_i+0x148>
 8000e62:	6923      	ldr	r3, [r4, #16]
 8000e64:	4632      	mov	r2, r6
 8000e66:	4649      	mov	r1, r9
 8000e68:	4640      	mov	r0, r8
 8000e6a:	47d0      	blx	sl
 8000e6c:	3001      	adds	r0, #1
 8000e6e:	d0ad      	beq.n	8000dcc <_printf_i+0x15c>
 8000e70:	6823      	ldr	r3, [r4, #0]
 8000e72:	079b      	lsls	r3, r3, #30
 8000e74:	d413      	bmi.n	8000e9e <_printf_i+0x22e>
 8000e76:	68e0      	ldr	r0, [r4, #12]
 8000e78:	9b03      	ldr	r3, [sp, #12]
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	bfb8      	it	lt
 8000e7e:	4618      	movlt	r0, r3
 8000e80:	e7a6      	b.n	8000dd0 <_printf_i+0x160>
 8000e82:	2301      	movs	r3, #1
 8000e84:	4632      	mov	r2, r6
 8000e86:	4649      	mov	r1, r9
 8000e88:	4640      	mov	r0, r8
 8000e8a:	47d0      	blx	sl
 8000e8c:	3001      	adds	r0, #1
 8000e8e:	d09d      	beq.n	8000dcc <_printf_i+0x15c>
 8000e90:	3501      	adds	r5, #1
 8000e92:	68e3      	ldr	r3, [r4, #12]
 8000e94:	9903      	ldr	r1, [sp, #12]
 8000e96:	1a5b      	subs	r3, r3, r1
 8000e98:	42ab      	cmp	r3, r5
 8000e9a:	dcf2      	bgt.n	8000e82 <_printf_i+0x212>
 8000e9c:	e7eb      	b.n	8000e76 <_printf_i+0x206>
 8000e9e:	2500      	movs	r5, #0
 8000ea0:	f104 0619 	add.w	r6, r4, #25
 8000ea4:	e7f5      	b.n	8000e92 <_printf_i+0x222>
 8000ea6:	bf00      	nop
 8000ea8:	08000fc7 	.word	0x08000fc7
 8000eac:	08000fd8 	.word	0x08000fd8

08000eb0 <memmove>:
 8000eb0:	4288      	cmp	r0, r1
 8000eb2:	b510      	push	{r4, lr}
 8000eb4:	eb01 0402 	add.w	r4, r1, r2
 8000eb8:	d902      	bls.n	8000ec0 <memmove+0x10>
 8000eba:	4284      	cmp	r4, r0
 8000ebc:	4623      	mov	r3, r4
 8000ebe:	d807      	bhi.n	8000ed0 <memmove+0x20>
 8000ec0:	1e43      	subs	r3, r0, #1
 8000ec2:	42a1      	cmp	r1, r4
 8000ec4:	d008      	beq.n	8000ed8 <memmove+0x28>
 8000ec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000eca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000ece:	e7f8      	b.n	8000ec2 <memmove+0x12>
 8000ed0:	4402      	add	r2, r0
 8000ed2:	4601      	mov	r1, r0
 8000ed4:	428a      	cmp	r2, r1
 8000ed6:	d100      	bne.n	8000eda <memmove+0x2a>
 8000ed8:	bd10      	pop	{r4, pc}
 8000eda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000ede:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000ee2:	e7f7      	b.n	8000ed4 <memmove+0x24>

08000ee4 <_sbrk_r>:
 8000ee4:	b538      	push	{r3, r4, r5, lr}
 8000ee6:	4d06      	ldr	r5, [pc, #24]	@ (8000f00 <_sbrk_r+0x1c>)
 8000ee8:	2300      	movs	r3, #0
 8000eea:	4604      	mov	r4, r0
 8000eec:	4608      	mov	r0, r1
 8000eee:	602b      	str	r3, [r5, #0]
 8000ef0:	f7ff fa7e 	bl	80003f0 <_sbrk>
 8000ef4:	1c43      	adds	r3, r0, #1
 8000ef6:	d102      	bne.n	8000efe <_sbrk_r+0x1a>
 8000ef8:	682b      	ldr	r3, [r5, #0]
 8000efa:	b103      	cbz	r3, 8000efe <_sbrk_r+0x1a>
 8000efc:	6023      	str	r3, [r4, #0]
 8000efe:	bd38      	pop	{r3, r4, r5, pc}
 8000f00:	200001ac 	.word	0x200001ac

08000f04 <memcpy>:
 8000f04:	440a      	add	r2, r1
 8000f06:	4291      	cmp	r1, r2
 8000f08:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000f0c:	d100      	bne.n	8000f10 <memcpy+0xc>
 8000f0e:	4770      	bx	lr
 8000f10:	b510      	push	{r4, lr}
 8000f12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000f16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000f1a:	4291      	cmp	r1, r2
 8000f1c:	d1f9      	bne.n	8000f12 <memcpy+0xe>
 8000f1e:	bd10      	pop	{r4, pc}

08000f20 <_realloc_r>:
 8000f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f24:	4680      	mov	r8, r0
 8000f26:	4615      	mov	r5, r2
 8000f28:	460c      	mov	r4, r1
 8000f2a:	b921      	cbnz	r1, 8000f36 <_realloc_r+0x16>
 8000f2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f30:	4611      	mov	r1, r2
 8000f32:	f7ff bc4b 	b.w	80007cc <_malloc_r>
 8000f36:	b92a      	cbnz	r2, 8000f44 <_realloc_r+0x24>
 8000f38:	f7ff fbdc 	bl	80006f4 <_free_r>
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	4620      	mov	r0, r4
 8000f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f44:	f000 f81a 	bl	8000f7c <_malloc_usable_size_r>
 8000f48:	4285      	cmp	r5, r0
 8000f4a:	4606      	mov	r6, r0
 8000f4c:	d802      	bhi.n	8000f54 <_realloc_r+0x34>
 8000f4e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8000f52:	d8f4      	bhi.n	8000f3e <_realloc_r+0x1e>
 8000f54:	4629      	mov	r1, r5
 8000f56:	4640      	mov	r0, r8
 8000f58:	f7ff fc38 	bl	80007cc <_malloc_r>
 8000f5c:	4607      	mov	r7, r0
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	d0ec      	beq.n	8000f3c <_realloc_r+0x1c>
 8000f62:	42b5      	cmp	r5, r6
 8000f64:	462a      	mov	r2, r5
 8000f66:	4621      	mov	r1, r4
 8000f68:	bf28      	it	cs
 8000f6a:	4632      	movcs	r2, r6
 8000f6c:	f7ff ffca 	bl	8000f04 <memcpy>
 8000f70:	4621      	mov	r1, r4
 8000f72:	4640      	mov	r0, r8
 8000f74:	f7ff fbbe 	bl	80006f4 <_free_r>
 8000f78:	463c      	mov	r4, r7
 8000f7a:	e7e0      	b.n	8000f3e <_realloc_r+0x1e>

08000f7c <_malloc_usable_size_r>:
 8000f7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f80:	1f18      	subs	r0, r3, #4
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	bfbc      	itt	lt
 8000f86:	580b      	ldrlt	r3, [r1, r0]
 8000f88:	18c0      	addlt	r0, r0, r3
 8000f8a:	4770      	bx	lr

08000f8c <_init>:
 8000f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f8e:	bf00      	nop
 8000f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f92:	bc08      	pop	{r3}
 8000f94:	469e      	mov	lr, r3
 8000f96:	4770      	bx	lr

08000f98 <_fini>:
 8000f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9a:	bf00      	nop
 8000f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f9e:	bc08      	pop	{r3}
 8000fa0:	469e      	mov	lr, r3
 8000fa2:	4770      	bx	lr
