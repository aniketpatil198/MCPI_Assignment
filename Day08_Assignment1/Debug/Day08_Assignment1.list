
Day08_Assignment1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014f0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08001680  08001680  00002680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001810  08001810  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  08001810  08001810  00002810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001818  08001818  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001818  08001818  00002818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800181c  0800181c  0000281c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001820  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000168  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000150b  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000724  00000000  00000000  0000458f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00004cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fb  00000000  00000000  00004e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019449  00000000  00000000  00004f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001fcf  00000000  00000000  0001e374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bdf8  00000000  00000000  00020343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ac13b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ac4  00000000  00000000  000ac180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000acc44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000059  00000000  00000000  000acc63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001668 	.word	0x08001668

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001668 	.word	0x08001668

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <EEPROM_Init>:
 *      Author: hp
 */

#include "eeprom.h"

void EEPROM_Init(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	int ret;
	I2CInit();
 8000286:	f000 f96d 	bl	8000564 <I2CInit>
	// optional -- check if eeprom is present
	I2CStart();
 800028a:	f000 f8a3 	bl	80003d4 <I2CStart>
	ret = I2CIsDeviceReady(EEPROM_W);
 800028e:	20a0      	movs	r0, #160	@ 0xa0
 8000290:	f000 f94a 	bl	8000528 <I2CIsDeviceReady>
 8000294:	6078      	str	r0, [r7, #4]
	// if ret=0, eeprom not avail; otherwise, eeprom is avail.
	I2CStop();
 8000296:	f000 f8bb 	bl	8000410 <I2CStop>
}
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}

080002a2 <EEPROM_Write>:

void EEPROM_Write(uint16_t addr, uint8_t byte[], uint8_t n) {
 80002a2:	b580      	push	{r7, lr}
 80002a4:	b084      	sub	sp, #16
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	4603      	mov	r3, r0
 80002aa:	6039      	str	r1, [r7, #0]
 80002ac:	80fb      	strh	r3, [r7, #6]
 80002ae:	4613      	mov	r3, r2
 80002b0:	717b      	strb	r3, [r7, #5]
	uint8_t high = addr >> 8, low = addr & 0xFF;
 80002b2:	88fb      	ldrh	r3, [r7, #6]
 80002b4:	0a1b      	lsrs	r3, r3, #8
 80002b6:	b29b      	uxth	r3, r3
 80002b8:	72fb      	strb	r3, [r7, #11]
 80002ba:	88fb      	ldrh	r3, [r7, #6]
 80002bc:	72bb      	strb	r3, [r7, #10]
	I2CStart();
 80002be:	f000 f889 	bl	80003d4 <I2CStart>
	I2CSendSlaveAddress(EEPROM_W);
 80002c2:	20a0      	movs	r0, #160	@ 0xa0
 80002c4:	f000 f8bc 	bl	8000440 <I2CSendSlaveAddress>
	I2CSendData(high);
 80002c8:	7afb      	ldrb	r3, [r7, #11]
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f8d4 	bl	8000478 <I2CSendData>
	I2CSendData(low);
 80002d0:	7abb      	ldrb	r3, [r7, #10]
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 f8d0 	bl	8000478 <I2CSendData>
	for(int i=0; i<n; i++)
 80002d8:	2300      	movs	r3, #0
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	e009      	b.n	80002f2 <EEPROM_Write+0x50>
		I2CSendData(byte[i]);
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	683a      	ldr	r2, [r7, #0]
 80002e2:	4413      	add	r3, r2
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	4618      	mov	r0, r3
 80002e8:	f000 f8c6 	bl	8000478 <I2CSendData>
	for(int i=0; i<n; i++)
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	3301      	adds	r3, #1
 80002f0:	60fb      	str	r3, [r7, #12]
 80002f2:	797b      	ldrb	r3, [r7, #5]
 80002f4:	68fa      	ldr	r2, [r7, #12]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	dbf1      	blt.n	80002de <EEPROM_Write+0x3c>
	I2CStop();
 80002fa:	f000 f889 	bl	8000410 <I2CStop>
}
 80002fe:	bf00      	nop
 8000300:	3710      	adds	r7, #16
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}

08000306 <EEPROM_Read>:

void EEPROM_Read(uint16_t addr, uint8_t byte[], uint8_t n) {
 8000306:	b590      	push	{r4, r7, lr}
 8000308:	b085      	sub	sp, #20
 800030a:	af00      	add	r7, sp, #0
 800030c:	4603      	mov	r3, r0
 800030e:	6039      	str	r1, [r7, #0]
 8000310:	80fb      	strh	r3, [r7, #6]
 8000312:	4613      	mov	r3, r2
 8000314:	717b      	strb	r3, [r7, #5]
	int i;
	uint8_t high = addr >> 8, low = addr & 0xFF;
 8000316:	88fb      	ldrh	r3, [r7, #6]
 8000318:	0a1b      	lsrs	r3, r3, #8
 800031a:	b29b      	uxth	r3, r3
 800031c:	72fb      	strb	r3, [r7, #11]
 800031e:	88fb      	ldrh	r3, [r7, #6]
 8000320:	72bb      	strb	r3, [r7, #10]
	I2CStart();
 8000322:	f000 f857 	bl	80003d4 <I2CStart>
	I2CSendSlaveAddress(EEPROM_W);
 8000326:	20a0      	movs	r0, #160	@ 0xa0
 8000328:	f000 f88a 	bl	8000440 <I2CSendSlaveAddress>
	I2CSendData(high);
 800032c:	7afb      	ldrb	r3, [r7, #11]
 800032e:	4618      	mov	r0, r3
 8000330:	f000 f8a2 	bl	8000478 <I2CSendData>
	I2CSendData(low);
 8000334:	7abb      	ldrb	r3, [r7, #10]
 8000336:	4618      	mov	r0, r3
 8000338:	f000 f89e 	bl	8000478 <I2CSendData>
	I2CRepeatStart();
 800033c:	f000 f862 	bl	8000404 <I2CRepeatStart>
	I2CSendSlaveAddress(EEPROM_R);
 8000340:	20a1      	movs	r0, #161	@ 0xa1
 8000342:	f000 f87d 	bl	8000440 <I2CSendSlaveAddress>
	for(i=0; i<n-1; i++)
 8000346:	2300      	movs	r3, #0
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e009      	b.n	8000360 <EEPROM_Read+0x5a>
		byte[i] = I2CRecvDataAck();
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	683a      	ldr	r2, [r7, #0]
 8000350:	18d4      	adds	r4, r2, r3
 8000352:	f000 f8b1 	bl	80004b8 <I2CRecvDataAck>
 8000356:	4603      	mov	r3, r0
 8000358:	7023      	strb	r3, [r4, #0]
	for(i=0; i<n-1; i++)
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	3301      	adds	r3, #1
 800035e:	60fb      	str	r3, [r7, #12]
 8000360:	797b      	ldrb	r3, [r7, #5]
 8000362:	3b01      	subs	r3, #1
 8000364:	68fa      	ldr	r2, [r7, #12]
 8000366:	429a      	cmp	r2, r3
 8000368:	dbf0      	blt.n	800034c <EEPROM_Read+0x46>
	byte[i] = I2CRecvDataNAck();
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	683a      	ldr	r2, [r7, #0]
 800036e:	18d4      	adds	r4, r2, r3
 8000370:	f000 f8be 	bl	80004f0 <I2CRecvDataNAck>
 8000374:	4603      	mov	r3, r0
 8000376:	7023      	strb	r3, [r4, #0]
	I2CStop();
 8000378:	f000 f84a 	bl	8000410 <I2CStop>
}
 800037c:	bf00      	nop
 800037e:	3714      	adds	r7, #20
 8000380:	46bd      	mov	sp, r7
 8000382:	bd90      	pop	{r4, r7, pc}

08000384 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000384:	b480      	push	{r7}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 800038c:	4b0e      	ldr	r3, [pc, #56]	@ (80003c8 <DelayMs+0x44>)
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000392:	4b0e      	ldr	r3, [pc, #56]	@ (80003cc <DelayMs+0x48>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a0e      	ldr	r2, [pc, #56]	@ (80003d0 <DelayMs+0x4c>)
 8000398:	fba2 2303 	umull	r2, r3, r2, r3
 800039c:	099b      	lsrs	r3, r3, #6
 800039e:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	68ba      	ldr	r2, [r7, #8]
 80003a4:	fb02 f303 	mul.w	r3, r2, r3
 80003a8:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80003aa:	bf00      	nop
 80003ac:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <DelayMs+0x44>)
 80003ae:	685a      	ldr	r2, [r3, #4]
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	1ad2      	subs	r2, r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	429a      	cmp	r2, r3
 80003b8:	d3f8      	bcc.n	80003ac <DelayMs+0x28>
}
 80003ba:	bf00      	nop
 80003bc:	bf00      	nop
 80003be:	3714      	adds	r7, #20
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr
 80003c8:	e0001000 	.word	0xe0001000
 80003cc:	20000000 	.word	0x20000000
 80003d0:	10624dd3 	.word	0x10624dd3

080003d4 <I2CStart>:
 */


#include "i2c.h"

void I2CStart() {
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;
 80003d8:	4b09      	ldr	r3, [pc, #36]	@ (8000400 <I2CStart+0x2c>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a08      	ldr	r2, [pc, #32]	@ (8000400 <I2CStart+0x2c>)
 80003de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003e2:	6013      	str	r3, [r2, #0]
    //while(!(I2C1->SR1 & I2C_SR1_SB));
    while((I2C1->SR1 & I2C_SR1_SB) == 0);
 80003e4:	bf00      	nop
 80003e6:	4b06      	ldr	r3, [pc, #24]	@ (8000400 <I2CStart+0x2c>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d0f9      	beq.n	80003e6 <I2CStart+0x12>
}
 80003f2:	bf00      	nop
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40005400 	.word	0x40005400

08000404 <I2CRepeatStart>:

void I2CRepeatStart() {
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	I2CStart();
 8000408:	f7ff ffe4 	bl	80003d4 <I2CStart>
}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}

08000410 <I2CStop>:

void I2CStop() {
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 8000414:	4b09      	ldr	r3, [pc, #36]	@ (800043c <I2CStop+0x2c>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a08      	ldr	r2, [pc, #32]	@ (800043c <I2CStop+0x2c>)
 800041a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800041e:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR2 & I2C_SR2_BUSY));
 8000420:	bf00      	nop
 8000422:	4b06      	ldr	r3, [pc, #24]	@ (800043c <I2CStop+0x2c>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	f003 0302 	and.w	r3, r3, #2
 800042a:	2b00      	cmp	r3, #0
 800042c:	d0f9      	beq.n	8000422 <I2CStop+0x12>
}
 800042e:	bf00      	nop
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40005400 	.word	0x40005400

08000440 <I2CSendSlaveAddress>:

void I2CSendSlaveAddress(uint8_t slaveaddr) {
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	71fb      	strb	r3, [r7, #7]
    // send slaveaddr
    // wait until address is sent
    I2C1->DR = slaveaddr;
 800044a:	4a0a      	ldr	r2, [pc, #40]	@ (8000474 <I2CSendSlaveAddress+0x34>)
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000450:	bf00      	nop
 8000452:	4b08      	ldr	r3, [pc, #32]	@ (8000474 <I2CSendSlaveAddress+0x34>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	f003 0302 	and.w	r3, r3, #2
 800045a:	2b00      	cmp	r3, #0
 800045c:	d0f9      	beq.n	8000452 <I2CSendSlaveAddress+0x12>
    // dummy read to clear flags
    (void)I2C1->SR1;
 800045e:	4b05      	ldr	r3, [pc, #20]	@ (8000474 <I2CSendSlaveAddress+0x34>)
 8000460:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2; // clear addr condition
 8000462:	4b04      	ldr	r3, [pc, #16]	@ (8000474 <I2CSendSlaveAddress+0x34>)
 8000464:	699b      	ldr	r3, [r3, #24]
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	40005400 	.word	0x40005400

08000478 <I2CSendData>:

void I2CSendData(uint8_t val) {
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	71fb      	strb	r3, [r7, #7]
    // send data in write mode
    // wait until address is sent
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000482:	bf00      	nop
 8000484:	4b0b      	ldr	r3, [pc, #44]	@ (80004b4 <I2CSendData+0x3c>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800048c:	2b00      	cmp	r3, #0
 800048e:	d0f9      	beq.n	8000484 <I2CSendData+0xc>
    // write dr and clear flags
    I2C1->DR = val;
 8000490:	4a08      	ldr	r2, [pc, #32]	@ (80004b4 <I2CSendData+0x3c>)
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	6113      	str	r3, [r2, #16]
    // wait until data byte is transferred
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 8000496:	bf00      	nop
 8000498:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <I2CSendData+0x3c>)
 800049a:	695b      	ldr	r3, [r3, #20]
 800049c:	f003 0304 	and.w	r3, r3, #4
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d0f9      	beq.n	8000498 <I2CSendData+0x20>
}
 80004a4:	bf00      	nop
 80004a6:	bf00      	nop
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	40005400 	.word	0x40005400

080004b8 <I2CRecvDataAck>:

uint8_t I2CRecvDataAck(void) {
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
	uint8_t val;
	I2C1->CR1 |= I2C_CR1_ACK | I2C_CR1_POS;
 80004be:	4b0b      	ldr	r3, [pc, #44]	@ (80004ec <I2CRecvDataAck+0x34>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a0a      	ldr	r2, [pc, #40]	@ (80004ec <I2CRecvDataAck+0x34>)
 80004c4:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80004c8:	6013      	str	r3, [r2, #0]
	// wait until receive buffer is not empty
	while (!(I2C1->SR1 & I2C_SR1_RXNE));
 80004ca:	bf00      	nop
 80004cc:	4b07      	ldr	r3, [pc, #28]	@ (80004ec <I2CRecvDataAck+0x34>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d0f9      	beq.n	80004cc <I2CRecvDataAck+0x14>
	// read content and clear flags
	val = (uint8_t)I2C1->DR;
 80004d8:	4b04      	ldr	r3, [pc, #16]	@ (80004ec <I2CRecvDataAck+0x34>)
 80004da:	691b      	ldr	r3, [r3, #16]
 80004dc:	71fb      	strb	r3, [r7, #7]
	return val;
 80004de:	79fb      	ldrb	r3, [r7, #7]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	40005400 	.word	0x40005400

080004f0 <I2CRecvDataNAck>:

uint8_t I2CRecvDataNAck(void) {
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
	uint8_t val;
	I2C1->CR1 &= ~(I2C_CR1_ACK | I2C_CR1_POS);
 80004f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000524 <I2CRecvDataNAck+0x34>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000524 <I2CRecvDataNAck+0x34>)
 80004fc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000500:	6013      	str	r3, [r2, #0]
	// wait until receive buffer is not empty
	while (!(I2C1->SR1 & I2C_SR1_RXNE));
 8000502:	bf00      	nop
 8000504:	4b07      	ldr	r3, [pc, #28]	@ (8000524 <I2CRecvDataNAck+0x34>)
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800050c:	2b00      	cmp	r3, #0
 800050e:	d0f9      	beq.n	8000504 <I2CRecvDataNAck+0x14>
	// read content and clear flags
	val = I2C1->DR;
 8000510:	4b04      	ldr	r3, [pc, #16]	@ (8000524 <I2CRecvDataNAck+0x34>)
 8000512:	691b      	ldr	r3, [r3, #16]
 8000514:	71fb      	strb	r3, [r7, #7]
	return val;
 8000516:	79fb      	ldrb	r3, [r7, #7]
}
 8000518:	4618      	mov	r0, r3
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	40005400 	.word	0x40005400

08000528 <I2CIsDeviceReady>:

int I2CIsDeviceReady(uint8_t slaveaddr) {
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
    // send slaveaddr of write
	slaveaddr &= ~BV(0);
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	f023 0301 	bic.w	r3, r3, #1
 8000538:	71fb      	strb	r3, [r7, #7]
    // wait until address is sent
    I2C1->DR = slaveaddr;
 800053a:	4a09      	ldr	r2, [pc, #36]	@ (8000560 <I2CIsDeviceReady+0x38>)
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000540:	bf00      	nop
 8000542:	4b07      	ldr	r3, [pc, #28]	@ (8000560 <I2CIsDeviceReady+0x38>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	2b00      	cmp	r3, #0
 800054c:	d0f9      	beq.n	8000542 <I2CIsDeviceReady+0x1a>
    // dummy read to clear flags
    (void)I2C1->SR2; // clear addr condition
 800054e:	4b04      	ldr	r3, [pc, #16]	@ (8000560 <I2CIsDeviceReady+0x38>)
 8000550:	699b      	ldr	r3, [r3, #24]
	return 1;
 8000552:	2301      	movs	r3, #1
}
 8000554:	4618      	mov	r0, r3
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	40005400 	.word	0x40005400

08000564 <I2CInit>:

void I2CInit() {
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
    // enable GPIOB clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000568:	4b43      	ldr	r3, [pc, #268]	@ (8000678 <I2CInit+0x114>)
 800056a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056c:	4a42      	ldr	r2, [pc, #264]	@ (8000678 <I2CInit+0x114>)
 800056e:	f043 0302 	orr.w	r3, r3, #2
 8000572:	6313      	str	r3, [r2, #48]	@ 0x30
	DelayMs(50);
 8000574:	2032      	movs	r0, #50	@ 0x32
 8000576:	f7ff ff05 	bl	8000384 <DelayMs>

    // setup I2C pins
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800057a:	4b3f      	ldr	r3, [pc, #252]	@ (8000678 <I2CInit+0x114>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	4a3e      	ldr	r2, [pc, #248]	@ (8000678 <I2CInit+0x114>)
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOB->MODER &= ~(3UL << I2C1_SCL*2); // PB6
 8000586:	4b3d      	ldr	r3, [pc, #244]	@ (800067c <I2CInit+0x118>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a3c      	ldr	r2, [pc, #240]	@ (800067c <I2CInit+0x118>)
 800058c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000590:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2UL << I2C1_SCL*2); // AF
 8000592:	4b3a      	ldr	r3, [pc, #232]	@ (800067c <I2CInit+0x118>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a39      	ldr	r2, [pc, #228]	@ (800067c <I2CInit+0x118>)
 8000598:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800059c:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1UL << I2C1_SCL);   // open-drain
 800059e:	4b37      	ldr	r3, [pc, #220]	@ (800067c <I2CInit+0x118>)
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	4a36      	ldr	r2, [pc, #216]	@ (800067c <I2CInit+0x118>)
 80005a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005a8:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3UL << I2C1_SCL*2); // no pull-up/down
 80005aa:	4b34      	ldr	r3, [pc, #208]	@ (800067c <I2CInit+0x118>)
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	4a33      	ldr	r2, [pc, #204]	@ (800067c <I2CInit+0x118>)
 80005b0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80005b4:	60d3      	str	r3, [r2, #12]
    GPIOB->MODER &= ~(3UL << I2C1_SDA*2); // PB7
 80005b6:	4b31      	ldr	r3, [pc, #196]	@ (800067c <I2CInit+0x118>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a30      	ldr	r2, [pc, #192]	@ (800067c <I2CInit+0x118>)
 80005bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005c0:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2UL << I2C1_SDA*2); // AF
 80005c2:	4b2e      	ldr	r3, [pc, #184]	@ (800067c <I2CInit+0x118>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a2d      	ldr	r2, [pc, #180]	@ (800067c <I2CInit+0x118>)
 80005c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005cc:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1UL << I2C1_SDA);   // open-drain
 80005ce:	4b2b      	ldr	r3, [pc, #172]	@ (800067c <I2CInit+0x118>)
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	4a2a      	ldr	r2, [pc, #168]	@ (800067c <I2CInit+0x118>)
 80005d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d8:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3UL << I2C1_SDA*2); // no pull-up/down
 80005da:	4b28      	ldr	r3, [pc, #160]	@ (800067c <I2CInit+0x118>)
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	4a27      	ldr	r2, [pc, #156]	@ (800067c <I2CInit+0x118>)
 80005e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005e4:	60d3      	str	r3, [r2, #12]

    // choose AF4 for I2C1 in Alternate Function registers
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL6_Pos); // for pin 6
 80005e6:	4b25      	ldr	r3, [pc, #148]	@ (800067c <I2CInit+0x118>)
 80005e8:	6a1b      	ldr	r3, [r3, #32]
 80005ea:	4a24      	ldr	r2, [pc, #144]	@ (800067c <I2CInit+0x118>)
 80005ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80005f0:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL7_Pos); // for pin 7
 80005f2:	4b22      	ldr	r3, [pc, #136]	@ (800067c <I2CInit+0x118>)
 80005f4:	6a1b      	ldr	r3, [r3, #32]
 80005f6:	4a21      	ldr	r2, [pc, #132]	@ (800067c <I2CInit+0x118>)
 80005f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80005fc:	6213      	str	r3, [r2, #32]

    // enable I2C clock
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80005fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <I2CInit+0x114>)
 8000600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000602:	4a1d      	ldr	r2, [pc, #116]	@ (8000678 <I2CInit+0x114>)
 8000604:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000608:	6413      	str	r3, [r2, #64]	@ 0x40
	DelayMs(50);
 800060a:	2032      	movs	r0, #50	@ 0x32
 800060c:	f7ff feba 	bl	8000384 <DelayMs>
    // reset and clear reg
    I2C1->CR1 = I2C_CR1_SWRST;
 8000610:	4b1b      	ldr	r3, [pc, #108]	@ (8000680 <I2CInit+0x11c>)
 8000612:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000616:	601a      	str	r2, [r3, #0]
    I2C1->CR1 = 0;
 8000618:	4b19      	ldr	r3, [pc, #100]	@ (8000680 <I2CInit+0x11c>)
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]

    I2C1->CR2 &= ~(I2C_CR2_ITERREN); // disable error interrupt
 800061e:	4b18      	ldr	r3, [pc, #96]	@ (8000680 <I2CInit+0x11c>)
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	4a17      	ldr	r2, [pc, #92]	@ (8000680 <I2CInit+0x11c>)
 8000624:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000628:	6053      	str	r3, [r2, #4]
    I2C1->CCR &= ~(1 << I2C_CCR_FS_Pos); // standard mode (100 khz)
 800062a:	4b15      	ldr	r3, [pc, #84]	@ (8000680 <I2CInit+0x11c>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	4a14      	ldr	r2, [pc, #80]	@ (8000680 <I2CInit+0x11c>)
 8000630:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000634:	61d3      	str	r3, [r2, #28]
    // Enable Ack
    I2C1->CR1 |= (1<<I2C_CR1_ACK_Pos);
 8000636:	4b12      	ldr	r3, [pc, #72]	@ (8000680 <I2CInit+0x11c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a11      	ldr	r2, [pc, #68]	@ (8000680 <I2CInit+0x11c>)
 800063c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000640:	6013      	str	r3, [r2, #0]
    // Thigh and Tlow needs to be 5us each

    // Let's pick fPCLK1 = 16Mhz, TPCLK1 = 1/16Mhz = 62.5ns
    // Thigh = CCR * TPCLK1 => 5us = CCR * 62.5ns
    // CCR = 80
    I2C1->CR2 |= (16 << I2C_CR2_FREQ_Pos); // 16Mhz PCLK
 8000642:	4b0f      	ldr	r3, [pc, #60]	@ (8000680 <I2CInit+0x11c>)
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	4a0e      	ldr	r2, [pc, #56]	@ (8000680 <I2CInit+0x11c>)
 8000648:	f043 0310 	orr.w	r3, r3, #16
 800064c:	6053      	str	r3, [r2, #4]
    I2C1->CCR |= (80 << I2C_CCR_CCR_Pos);
 800064e:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <I2CInit+0x11c>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	4a0b      	ldr	r2, [pc, #44]	@ (8000680 <I2CInit+0x11c>)
 8000654:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000658:	61d3      	str	r3, [r2, #28]
    // Maximum rise time.
    // Calculation is (maximum_rise_time / Tpclk) + 1
    // In SM mode maximum allowed SCL rise time is 1000ns
    // For TPCLK1 = 62.5ns => (1000ns / 62.5ns) + 1 = 16 + 1 = 17
    I2C1->TRISE |= (17 << I2C_TRISE_TRISE_Pos); // program Trise to 17 for 100khz
 800065a:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <I2CInit+0x11c>)
 800065c:	6a1b      	ldr	r3, [r3, #32]
 800065e:	4a08      	ldr	r2, [pc, #32]	@ (8000680 <I2CInit+0x11c>)
 8000660:	f043 0311 	orr.w	r3, r3, #17
 8000664:	6213      	str	r3, [r2, #32]
    // Enable I2C
    I2C1->CR1 |= I2C_CR1_PE;
 8000666:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <I2CInit+0x11c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a05      	ldr	r2, [pc, #20]	@ (8000680 <I2CInit+0x11c>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6013      	str	r3, [r2, #0]
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40020400 	.word	0x40020400
 8000680:	40005400 	.word	0x40005400

08000684 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08e      	sub	sp, #56	@ 0x38
 8000688:	af00      	add	r7, sp, #0

	char strch[16];
		int ch=0;
 800068a:	2300      	movs	r3, #0
 800068c:	627b      	str	r3, [r7, #36]	@ 0x24

	SystemInit();
 800068e:	f000 f88f 	bl	80007b0 <SystemInit>
	EEPROM_Init();
 8000692:	f7ff fdf5 	bl	8000280 <EEPROM_Init>
	UartInit(BAUD_9600);
 8000696:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 800069a:	f000 f8bf 	bl	800081c <UartInit>
	char str[32] = "";
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	f107 0308 	add.w	r3, r7, #8
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]
 80006b2:	615a      	str	r2, [r3, #20]
 80006b4:	619a      	str	r2, [r3, #24]


	do {
			UartPuts("\r Choose action\n");
 80006b6:	481e      	ldr	r0, [pc, #120]	@ (8000730 <main+0xac>)
 80006b8:	f000 f94c 	bl	8000954 <UartPuts>
				UartPuts("\r 0.Exit\n\r 1. Write \n\r 2. Read \n\r ");
 80006bc:	481d      	ldr	r0, [pc, #116]	@ (8000734 <main+0xb0>)
 80006be:	f000 f949 	bl	8000954 <UartPuts>
				UartGets(strch);
 80006c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f960 	bl	800098c <UartGets>

				sscanf(strch, "%d", &ch);
 80006cc:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80006d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006d4:	4918      	ldr	r1, [pc, #96]	@ (8000738 <main+0xb4>)
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 f9a8 	bl	8000a2c <siscanf>
				UartPuts("\r choice done \n\r ");
 80006dc:	4817      	ldr	r0, [pc, #92]	@ (800073c <main+0xb8>)
 80006de:	f000 f939 	bl	8000954 <UartPuts>
				//mymenu(ch);

				switch(ch)
 80006e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d002      	beq.n	80006ee <main+0x6a>
 80006e8:	2b02      	cmp	r3, #2
 80006ea:	d00e      	beq.n	800070a <main+0x86>
 80006ec:	e018      	b.n	8000720 <main+0x9c>
					{

						case 1:

							UartPuts("\r Give a string :");
 80006ee:	4814      	ldr	r0, [pc, #80]	@ (8000740 <main+0xbc>)
 80006f0:	f000 f930 	bl	8000954 <UartPuts>
							UartGets(str);
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f948 	bl	800098c <UartGets>
							EEPROM_Write(0x0000, (uint8_t*)str, 16);
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2210      	movs	r2, #16
 8000700:	4619      	mov	r1, r3
 8000702:	2000      	movs	r0, #0
 8000704:	f7ff fdcd 	bl	80002a2 <EEPROM_Write>
							break;
 8000708:	e00a      	b.n	8000720 <main+0x9c>

						case 2:

							EEPROM_Read(0x0000, (uint8_t*)str,32);
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2220      	movs	r2, #32
 800070e:	4619      	mov	r1, r3
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff fdf8 	bl	8000306 <EEPROM_Read>
							UartPuts(str);
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f91b 	bl	8000954 <UartPuts>
							break;
 800071e:	bf00      	nop


			}

	//while(1);
				}while(ch!=0);
 8000720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1c7      	bne.n	80006b6 <main+0x32>
	return 0;
 8000726:	2300      	movs	r3, #0
}
 8000728:	4618      	mov	r0, r3
 800072a:	3738      	adds	r7, #56	@ 0x38
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	08001680 	.word	0x08001680
 8000734:	08001694 	.word	0x08001694
 8000738:	080016b8 	.word	0x080016b8
 800073c:	080016bc 	.word	0x080016bc
 8000740:	080016d0 	.word	0x080016d0

08000744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800074c:	4a14      	ldr	r2, [pc, #80]	@ (80007a0 <_sbrk+0x5c>)
 800074e:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <_sbrk+0x60>)
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000758:	4b13      	ldr	r3, [pc, #76]	@ (80007a8 <_sbrk+0x64>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d102      	bne.n	8000766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000760:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <_sbrk+0x64>)
 8000762:	4a12      	ldr	r2, [pc, #72]	@ (80007ac <_sbrk+0x68>)
 8000764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000766:	4b10      	ldr	r3, [pc, #64]	@ (80007a8 <_sbrk+0x64>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4413      	add	r3, r2
 800076e:	693a      	ldr	r2, [r7, #16]
 8000770:	429a      	cmp	r2, r3
 8000772:	d207      	bcs.n	8000784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000774:	f000 f986 	bl	8000a84 <__errno>
 8000778:	4603      	mov	r3, r0
 800077a:	220c      	movs	r2, #12
 800077c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800077e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000782:	e009      	b.n	8000798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000784:	4b08      	ldr	r3, [pc, #32]	@ (80007a8 <_sbrk+0x64>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800078a:	4b07      	ldr	r3, [pc, #28]	@ (80007a8 <_sbrk+0x64>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	4a05      	ldr	r2, [pc, #20]	@ (80007a8 <_sbrk+0x64>)
 8000794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000796:	68fb      	ldr	r3, [r7, #12]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20020000 	.word	0x20020000
 80007a4:	00000400 	.word	0x00000400
 80007a8:	20000070 	.word	0x20000070
 80007ac:	200001c0 	.word	0x200001c0

080007b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  DWT_Init();
 80007b4:	f000 f802 	bl	80007bc <DWT_Init>
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}

080007bc <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80007c0:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <DWT_Init+0x58>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	4a13      	ldr	r2, [pc, #76]	@ (8000814 <DWT_Init+0x58>)
 80007c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80007ca:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80007cc:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <DWT_Init+0x58>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	4a10      	ldr	r2, [pc, #64]	@ (8000814 <DWT_Init+0x58>)
 80007d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80007d6:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <DWT_Init+0x5c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000818 <DWT_Init+0x5c>)
 80007de:	f023 0301 	bic.w	r3, r3, #1
 80007e2:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <DWT_Init+0x5c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000818 <DWT_Init+0x5c>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80007f0:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <DWT_Init+0x5c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80007f6:	bf00      	nop
    __ASM volatile ("NOP");
 80007f8:	bf00      	nop
    __ASM volatile ("NOP");
 80007fa:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <DWT_Init+0x5c>)
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	2b00      	cmp	r3, #0
 8000802:	bf0c      	ite	eq
 8000804:	2301      	moveq	r3, #1
 8000806:	2300      	movne	r3, #0
 8000808:	b2db      	uxtb	r3, r3
}
 800080a:	4618      	mov	r0, r3
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000edf0 	.word	0xe000edf0
 8000818:	e0001000 	.word	0xe0001000

0800081c <UartInit>:

#define TX_PIN	2
#define RX_PIN	3
#define USART_ALT_FN	7

void UartInit(uint32_t baud) {
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	// UART GPIO Init -- PA.2 (Tx) and PA.3 (Rx)
	// enable clock
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 8000824:	4b31      	ldr	r3, [pc, #196]	@ (80008ec <UartInit+0xd0>)
 8000826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000828:	4a30      	ldr	r2, [pc, #192]	@ (80008ec <UartInit+0xd0>)
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	6313      	str	r3, [r2, #48]	@ 0x30
	//	alt fn = 0111 = 7 (Uart Tx and Rx)
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 8000830:	4b2f      	ldr	r3, [pc, #188]	@ (80008f0 <UartInit+0xd4>)
 8000832:	6a1b      	ldr	r3, [r3, #32]
 8000834:	4a2e      	ldr	r2, [pc, #184]	@ (80008f0 <UartInit+0xd4>)
 8000836:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800083a:	6213      	str	r3, [r2, #32]
	// 	mode=10 (alt fn), speed=00 (low), pupdr=00 (none), typer=0 (push-pull)
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 800083c:	4b2c      	ldr	r3, [pc, #176]	@ (80008f0 <UartInit+0xd4>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a2b      	ldr	r2, [pc, #172]	@ (80008f0 <UartInit+0xd4>)
 8000842:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000846:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 8000848:	4b29      	ldr	r3, [pc, #164]	@ (80008f0 <UartInit+0xd4>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a28      	ldr	r2, [pc, #160]	@ (80008f0 <UartInit+0xd4>)
 800084e:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8000852:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000854:	4b26      	ldr	r3, [pc, #152]	@ (80008f0 <UartInit+0xd4>)
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	4a25      	ldr	r2, [pc, #148]	@ (80008f0 <UartInit+0xd4>)
 800085a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800085e:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000860:	4b23      	ldr	r3, [pc, #140]	@ (80008f0 <UartInit+0xd4>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	4a22      	ldr	r2, [pc, #136]	@ (80008f0 <UartInit+0xd4>)
 8000866:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800086a:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 800086c:	4b20      	ldr	r3, [pc, #128]	@ (80008f0 <UartInit+0xd4>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4a1f      	ldr	r2, [pc, #124]	@ (80008f0 <UartInit+0xd4>)
 8000872:	f023 030c 	bic.w	r3, r3, #12
 8000876:	6053      	str	r3, [r2, #4]

	// UART Config
	// enable uart clock
	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 8000878:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <UartInit+0xd0>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087c:	4a1b      	ldr	r2, [pc, #108]	@ (80008ec <UartInit+0xd0>)
 800087e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000882:	6413      	str	r3, [r2, #64]	@ 0x40
	// tx en (TE=1), rx en (RE=1), wordlen=8 (M=0), OVER8=0, disable parity (PCE=0)
	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 8000884:	4b1b      	ldr	r3, [pc, #108]	@ (80008f4 <UartInit+0xd8>)
 8000886:	220c      	movs	r2, #12
 8000888:	60da      	str	r2, [r3, #12]
	// 1 stop bit (STOP=00), disable clock (CLKEN=0)
	USART2->CR2 = 0x00000000;
 800088a:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <UartInit+0xd8>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
	// no hw control, no irda, no dma, no interupts
	USART2->CR3 = 0x00000000;
 8000890:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <UartInit+0xd8>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
	// set BRR for given baud rate
	switch(baud) {
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 800089c:	d016      	beq.n	80008cc <UartInit+0xb0>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80008a4:	d816      	bhi.n	80008d4 <UartInit+0xb8>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 80008ac:	d004      	beq.n	80008b8 <UartInit+0x9c>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 80008b4:	d005      	beq.n	80008c2 <UartInit+0xa6>
 80008b6:	e00d      	b.n	80008d4 <UartInit+0xb8>
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 80008b8:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <UartInit+0xd8>)
 80008ba:	f240 6283 	movw	r2, #1667	@ 0x683
 80008be:	609a      	str	r2, [r3, #8]
			break;
 80008c0:	e008      	b.n	80008d4 <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <UartInit+0xd8>)
 80008c4:	f240 12a1 	movw	r2, #417	@ 0x1a1
 80008c8:	609a      	str	r2, [r3, #8]
			break;
 80008ca:	e003      	b.n	80008d4 <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <UartInit+0xd8>)
 80008ce:	228b      	movs	r2, #139	@ 0x8b
 80008d0:	609a      	str	r2, [r3, #8]
			break;
 80008d2:	bf00      	nop
	}
	// uart enable (UE=1)
	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 80008d4:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <UartInit+0xd8>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	4a06      	ldr	r2, [pc, #24]	@ (80008f4 <UartInit+0xd8>)
 80008da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008de:	60d3      	str	r3, [r2, #12]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020000 	.word	0x40020000
 80008f4:	40004400 	.word	0x40004400

080008f8 <UartPutch>:

void UartPutch(uint8_t ch) {
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
	// wait until TDR is empty (i.e. prev byte transmitted)
	while((USART2->SR & BV(USART_SR_TXE_Pos)) == 0)
 8000902:	bf00      	nop
 8000904:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <UartPutch+0x2c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800090c:	2b00      	cmp	r3, #0
 800090e:	d0f9      	beq.n	8000904 <UartPutch+0xc>
		;
	// write new byte in TDR
	USART2->DR = ch;
 8000910:	4a04      	ldr	r2, [pc, #16]	@ (8000924 <UartPutch+0x2c>)
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	6053      	str	r3, [r2, #4]
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40004400 	.word	0x40004400

08000928 <UartGetch>:

uint8_t UartGetch(void) {
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
	// wait until RDR is not empty (i.e. new byte received)
	while((USART2->SR & BV(USART_SR_RXNE_Pos)) == 0)
 800092e:	bf00      	nop
 8000930:	4b07      	ldr	r3, [pc, #28]	@ (8000950 <UartGetch+0x28>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f003 0320 	and.w	r3, r3, #32
 8000938:	2b00      	cmp	r3, #0
 800093a:	d0f9      	beq.n	8000930 <UartGetch+0x8>
		;
	// read received byte from RDR
	char ch = USART2->DR;
 800093c:	4b04      	ldr	r3, [pc, #16]	@ (8000950 <UartGetch+0x28>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	71fb      	strb	r3, [r7, #7]
	return ch;
 8000942:	79fb      	ldrb	r3, [r7, #7]
}
 8000944:	4618      	mov	r0, r3
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	40004400 	.word	0x40004400

08000954 <UartPuts>:

void UartPuts(char str[]) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0; str[i]!='\0'; i++)
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	e009      	b.n	8000976 <UartPuts+0x22>
		UartPutch(str[i]);
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	4413      	add	r3, r2
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff ffc4 	bl	80008f8 <UartPutch>
	for(i=0; str[i]!='\0'; i++)
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	3301      	adds	r3, #1
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	4413      	add	r3, r2
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d1ef      	bne.n	8000962 <UartPuts+0xe>
}
 8000982:	bf00      	nop
 8000984:	bf00      	nop
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <UartGets>:

void UartGets(char str[]) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	int i=0;
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
	char ch;
	do {
		ch = UartGetch();
 8000998:	f7ff ffc6 	bl	8000928 <UartGetch>
 800099c:	4603      	mov	r3, r0
 800099e:	72fb      	strb	r3, [r7, #11]
		str[i] = ch;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	7afa      	ldrb	r2, [r7, #11]
 80009a8:	701a      	strb	r2, [r3, #0]
		i++;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	3301      	adds	r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
	} while(ch != '\r');
 80009b0:	7afb      	ldrb	r3, [r7, #11]
 80009b2:	2b0d      	cmp	r3, #13
 80009b4:	d1f0      	bne.n	8000998 <UartGets+0xc>
	str[i] = '\n';
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	4413      	add	r3, r2
 80009bc:	220a      	movs	r2, #10
 80009be:	701a      	strb	r2, [r3, #0]
	i++;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	3301      	adds	r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
	str[i] = '\0';
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	4413      	add	r3, r2
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]
}
 80009d0:	bf00      	nop
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009d8:	480d      	ldr	r0, [pc, #52]	@ (8000a10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009dc:	f7ff fee8 	bl	80007b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e0:	480c      	ldr	r0, [pc, #48]	@ (8000a14 <LoopForever+0x6>)
  ldr r1, =_edata
 80009e2:	490d      	ldr	r1, [pc, #52]	@ (8000a18 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a1c <LoopForever+0xe>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e8:	e002      	b.n	80009f0 <LoopCopyDataInit>

080009ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ee:	3304      	adds	r3, #4

080009f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f4:	d3f9      	bcc.n	80009ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a20 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000a24 <LoopForever+0x16>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009fc:	e001      	b.n	8000a02 <LoopFillZerobss>

080009fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a00:	3204      	adds	r2, #4

08000a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a04:	d3fb      	bcc.n	80009fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a06:	f000 f843 	bl	8000a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a0a:	f7ff fe3b 	bl	8000684 <main>

08000a0e <LoopForever>:

LoopForever:
  b LoopForever
 8000a0e:	e7fe      	b.n	8000a0e <LoopForever>
  ldr   r0, =_estack
 8000a10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a18:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000a1c:	08001820 	.word	0x08001820
  ldr r2, =_sbss
 8000a20:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000a24:	200001bc 	.word	0x200001bc

08000a28 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC_IRQHandler>
	...

08000a2c <siscanf>:
 8000a2c:	b40e      	push	{r1, r2, r3}
 8000a2e:	b530      	push	{r4, r5, lr}
 8000a30:	b09c      	sub	sp, #112	@ 0x70
 8000a32:	ac1f      	add	r4, sp, #124	@ 0x7c
 8000a34:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8000a38:	f854 5b04 	ldr.w	r5, [r4], #4
 8000a3c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000a40:	9002      	str	r0, [sp, #8]
 8000a42:	9006      	str	r0, [sp, #24]
 8000a44:	f7ff fbc4 	bl	80001d0 <strlen>
 8000a48:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <siscanf+0x4c>)
 8000a4a:	9003      	str	r0, [sp, #12]
 8000a4c:	9007      	str	r0, [sp, #28]
 8000a4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000a50:	480a      	ldr	r0, [pc, #40]	@ (8000a7c <siscanf+0x50>)
 8000a52:	9401      	str	r4, [sp, #4]
 8000a54:	2300      	movs	r3, #0
 8000a56:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000a58:	9314      	str	r3, [sp, #80]	@ 0x50
 8000a5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a5e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000a62:	462a      	mov	r2, r5
 8000a64:	4623      	mov	r3, r4
 8000a66:	a902      	add	r1, sp, #8
 8000a68:	6800      	ldr	r0, [r0, #0]
 8000a6a:	f000 f987 	bl	8000d7c <__ssvfiscanf_r>
 8000a6e:	b01c      	add	sp, #112	@ 0x70
 8000a70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000a74:	b003      	add	sp, #12
 8000a76:	4770      	bx	lr
 8000a78:	08000a81 	.word	0x08000a81
 8000a7c:	20000004 	.word	0x20000004

08000a80 <__seofread>:
 8000a80:	2000      	movs	r0, #0
 8000a82:	4770      	bx	lr

08000a84 <__errno>:
 8000a84:	4b01      	ldr	r3, [pc, #4]	@ (8000a8c <__errno+0x8>)
 8000a86:	6818      	ldr	r0, [r3, #0]
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000004 	.word	0x20000004

08000a90 <__libc_init_array>:
 8000a90:	b570      	push	{r4, r5, r6, lr}
 8000a92:	4d0d      	ldr	r5, [pc, #52]	@ (8000ac8 <__libc_init_array+0x38>)
 8000a94:	4c0d      	ldr	r4, [pc, #52]	@ (8000acc <__libc_init_array+0x3c>)
 8000a96:	1b64      	subs	r4, r4, r5
 8000a98:	10a4      	asrs	r4, r4, #2
 8000a9a:	2600      	movs	r6, #0
 8000a9c:	42a6      	cmp	r6, r4
 8000a9e:	d109      	bne.n	8000ab4 <__libc_init_array+0x24>
 8000aa0:	4d0b      	ldr	r5, [pc, #44]	@ (8000ad0 <__libc_init_array+0x40>)
 8000aa2:	4c0c      	ldr	r4, [pc, #48]	@ (8000ad4 <__libc_init_array+0x44>)
 8000aa4:	f000 fde0 	bl	8001668 <_init>
 8000aa8:	1b64      	subs	r4, r4, r5
 8000aaa:	10a4      	asrs	r4, r4, #2
 8000aac:	2600      	movs	r6, #0
 8000aae:	42a6      	cmp	r6, r4
 8000ab0:	d105      	bne.n	8000abe <__libc_init_array+0x2e>
 8000ab2:	bd70      	pop	{r4, r5, r6, pc}
 8000ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ab8:	4798      	blx	r3
 8000aba:	3601      	adds	r6, #1
 8000abc:	e7ee      	b.n	8000a9c <__libc_init_array+0xc>
 8000abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ac2:	4798      	blx	r3
 8000ac4:	3601      	adds	r6, #1
 8000ac6:	e7f2      	b.n	8000aae <__libc_init_array+0x1e>
 8000ac8:	08001818 	.word	0x08001818
 8000acc:	08001818 	.word	0x08001818
 8000ad0:	08001818 	.word	0x08001818
 8000ad4:	0800181c 	.word	0x0800181c

08000ad8 <__retarget_lock_acquire_recursive>:
 8000ad8:	4770      	bx	lr

08000ada <__retarget_lock_release_recursive>:
 8000ada:	4770      	bx	lr

08000adc <_free_r>:
 8000adc:	b538      	push	{r3, r4, r5, lr}
 8000ade:	4605      	mov	r5, r0
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	d041      	beq.n	8000b68 <_free_r+0x8c>
 8000ae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ae8:	1f0c      	subs	r4, r1, #4
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	bfb8      	it	lt
 8000aee:	18e4      	addlt	r4, r4, r3
 8000af0:	f000 f8e0 	bl	8000cb4 <__malloc_lock>
 8000af4:	4a1d      	ldr	r2, [pc, #116]	@ (8000b6c <_free_r+0x90>)
 8000af6:	6813      	ldr	r3, [r2, #0]
 8000af8:	b933      	cbnz	r3, 8000b08 <_free_r+0x2c>
 8000afa:	6063      	str	r3, [r4, #4]
 8000afc:	6014      	str	r4, [r2, #0]
 8000afe:	4628      	mov	r0, r5
 8000b00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b04:	f000 b8dc 	b.w	8000cc0 <__malloc_unlock>
 8000b08:	42a3      	cmp	r3, r4
 8000b0a:	d908      	bls.n	8000b1e <_free_r+0x42>
 8000b0c:	6820      	ldr	r0, [r4, #0]
 8000b0e:	1821      	adds	r1, r4, r0
 8000b10:	428b      	cmp	r3, r1
 8000b12:	bf01      	itttt	eq
 8000b14:	6819      	ldreq	r1, [r3, #0]
 8000b16:	685b      	ldreq	r3, [r3, #4]
 8000b18:	1809      	addeq	r1, r1, r0
 8000b1a:	6021      	streq	r1, [r4, #0]
 8000b1c:	e7ed      	b.n	8000afa <_free_r+0x1e>
 8000b1e:	461a      	mov	r2, r3
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	b10b      	cbz	r3, 8000b28 <_free_r+0x4c>
 8000b24:	42a3      	cmp	r3, r4
 8000b26:	d9fa      	bls.n	8000b1e <_free_r+0x42>
 8000b28:	6811      	ldr	r1, [r2, #0]
 8000b2a:	1850      	adds	r0, r2, r1
 8000b2c:	42a0      	cmp	r0, r4
 8000b2e:	d10b      	bne.n	8000b48 <_free_r+0x6c>
 8000b30:	6820      	ldr	r0, [r4, #0]
 8000b32:	4401      	add	r1, r0
 8000b34:	1850      	adds	r0, r2, r1
 8000b36:	4283      	cmp	r3, r0
 8000b38:	6011      	str	r1, [r2, #0]
 8000b3a:	d1e0      	bne.n	8000afe <_free_r+0x22>
 8000b3c:	6818      	ldr	r0, [r3, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	6053      	str	r3, [r2, #4]
 8000b42:	4408      	add	r0, r1
 8000b44:	6010      	str	r0, [r2, #0]
 8000b46:	e7da      	b.n	8000afe <_free_r+0x22>
 8000b48:	d902      	bls.n	8000b50 <_free_r+0x74>
 8000b4a:	230c      	movs	r3, #12
 8000b4c:	602b      	str	r3, [r5, #0]
 8000b4e:	e7d6      	b.n	8000afe <_free_r+0x22>
 8000b50:	6820      	ldr	r0, [r4, #0]
 8000b52:	1821      	adds	r1, r4, r0
 8000b54:	428b      	cmp	r3, r1
 8000b56:	bf04      	itt	eq
 8000b58:	6819      	ldreq	r1, [r3, #0]
 8000b5a:	685b      	ldreq	r3, [r3, #4]
 8000b5c:	6063      	str	r3, [r4, #4]
 8000b5e:	bf04      	itt	eq
 8000b60:	1809      	addeq	r1, r1, r0
 8000b62:	6021      	streq	r1, [r4, #0]
 8000b64:	6054      	str	r4, [r2, #4]
 8000b66:	e7ca      	b.n	8000afe <_free_r+0x22>
 8000b68:	bd38      	pop	{r3, r4, r5, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200001b8 	.word	0x200001b8

08000b70 <sbrk_aligned>:
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	4e0f      	ldr	r6, [pc, #60]	@ (8000bb0 <sbrk_aligned+0x40>)
 8000b74:	460c      	mov	r4, r1
 8000b76:	6831      	ldr	r1, [r6, #0]
 8000b78:	4605      	mov	r5, r0
 8000b7a:	b911      	cbnz	r1, 8000b82 <sbrk_aligned+0x12>
 8000b7c:	f000 fc34 	bl	80013e8 <_sbrk_r>
 8000b80:	6030      	str	r0, [r6, #0]
 8000b82:	4621      	mov	r1, r4
 8000b84:	4628      	mov	r0, r5
 8000b86:	f000 fc2f 	bl	80013e8 <_sbrk_r>
 8000b8a:	1c43      	adds	r3, r0, #1
 8000b8c:	d103      	bne.n	8000b96 <sbrk_aligned+0x26>
 8000b8e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000b92:	4620      	mov	r0, r4
 8000b94:	bd70      	pop	{r4, r5, r6, pc}
 8000b96:	1cc4      	adds	r4, r0, #3
 8000b98:	f024 0403 	bic.w	r4, r4, #3
 8000b9c:	42a0      	cmp	r0, r4
 8000b9e:	d0f8      	beq.n	8000b92 <sbrk_aligned+0x22>
 8000ba0:	1a21      	subs	r1, r4, r0
 8000ba2:	4628      	mov	r0, r5
 8000ba4:	f000 fc20 	bl	80013e8 <_sbrk_r>
 8000ba8:	3001      	adds	r0, #1
 8000baa:	d1f2      	bne.n	8000b92 <sbrk_aligned+0x22>
 8000bac:	e7ef      	b.n	8000b8e <sbrk_aligned+0x1e>
 8000bae:	bf00      	nop
 8000bb0:	200001b4 	.word	0x200001b4

08000bb4 <_malloc_r>:
 8000bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bb8:	1ccd      	adds	r5, r1, #3
 8000bba:	f025 0503 	bic.w	r5, r5, #3
 8000bbe:	3508      	adds	r5, #8
 8000bc0:	2d0c      	cmp	r5, #12
 8000bc2:	bf38      	it	cc
 8000bc4:	250c      	movcc	r5, #12
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	4606      	mov	r6, r0
 8000bca:	db01      	blt.n	8000bd0 <_malloc_r+0x1c>
 8000bcc:	42a9      	cmp	r1, r5
 8000bce:	d904      	bls.n	8000bda <_malloc_r+0x26>
 8000bd0:	230c      	movs	r3, #12
 8000bd2:	6033      	str	r3, [r6, #0]
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000cb0 <_malloc_r+0xfc>
 8000bde:	f000 f869 	bl	8000cb4 <__malloc_lock>
 8000be2:	f8d8 3000 	ldr.w	r3, [r8]
 8000be6:	461c      	mov	r4, r3
 8000be8:	bb44      	cbnz	r4, 8000c3c <_malloc_r+0x88>
 8000bea:	4629      	mov	r1, r5
 8000bec:	4630      	mov	r0, r6
 8000bee:	f7ff ffbf 	bl	8000b70 <sbrk_aligned>
 8000bf2:	1c43      	adds	r3, r0, #1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	d158      	bne.n	8000caa <_malloc_r+0xf6>
 8000bf8:	f8d8 4000 	ldr.w	r4, [r8]
 8000bfc:	4627      	mov	r7, r4
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d143      	bne.n	8000c8a <_malloc_r+0xd6>
 8000c02:	2c00      	cmp	r4, #0
 8000c04:	d04b      	beq.n	8000c9e <_malloc_r+0xea>
 8000c06:	6823      	ldr	r3, [r4, #0]
 8000c08:	4639      	mov	r1, r7
 8000c0a:	4630      	mov	r0, r6
 8000c0c:	eb04 0903 	add.w	r9, r4, r3
 8000c10:	f000 fbea 	bl	80013e8 <_sbrk_r>
 8000c14:	4581      	cmp	r9, r0
 8000c16:	d142      	bne.n	8000c9e <_malloc_r+0xea>
 8000c18:	6821      	ldr	r1, [r4, #0]
 8000c1a:	1a6d      	subs	r5, r5, r1
 8000c1c:	4629      	mov	r1, r5
 8000c1e:	4630      	mov	r0, r6
 8000c20:	f7ff ffa6 	bl	8000b70 <sbrk_aligned>
 8000c24:	3001      	adds	r0, #1
 8000c26:	d03a      	beq.n	8000c9e <_malloc_r+0xea>
 8000c28:	6823      	ldr	r3, [r4, #0]
 8000c2a:	442b      	add	r3, r5
 8000c2c:	6023      	str	r3, [r4, #0]
 8000c2e:	f8d8 3000 	ldr.w	r3, [r8]
 8000c32:	685a      	ldr	r2, [r3, #4]
 8000c34:	bb62      	cbnz	r2, 8000c90 <_malloc_r+0xdc>
 8000c36:	f8c8 7000 	str.w	r7, [r8]
 8000c3a:	e00f      	b.n	8000c5c <_malloc_r+0xa8>
 8000c3c:	6822      	ldr	r2, [r4, #0]
 8000c3e:	1b52      	subs	r2, r2, r5
 8000c40:	d420      	bmi.n	8000c84 <_malloc_r+0xd0>
 8000c42:	2a0b      	cmp	r2, #11
 8000c44:	d917      	bls.n	8000c76 <_malloc_r+0xc2>
 8000c46:	1961      	adds	r1, r4, r5
 8000c48:	42a3      	cmp	r3, r4
 8000c4a:	6025      	str	r5, [r4, #0]
 8000c4c:	bf18      	it	ne
 8000c4e:	6059      	strne	r1, [r3, #4]
 8000c50:	6863      	ldr	r3, [r4, #4]
 8000c52:	bf08      	it	eq
 8000c54:	f8c8 1000 	streq.w	r1, [r8]
 8000c58:	5162      	str	r2, [r4, r5]
 8000c5a:	604b      	str	r3, [r1, #4]
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	f000 f82f 	bl	8000cc0 <__malloc_unlock>
 8000c62:	f104 000b 	add.w	r0, r4, #11
 8000c66:	1d23      	adds	r3, r4, #4
 8000c68:	f020 0007 	bic.w	r0, r0, #7
 8000c6c:	1ac2      	subs	r2, r0, r3
 8000c6e:	bf1c      	itt	ne
 8000c70:	1a1b      	subne	r3, r3, r0
 8000c72:	50a3      	strne	r3, [r4, r2]
 8000c74:	e7af      	b.n	8000bd6 <_malloc_r+0x22>
 8000c76:	6862      	ldr	r2, [r4, #4]
 8000c78:	42a3      	cmp	r3, r4
 8000c7a:	bf0c      	ite	eq
 8000c7c:	f8c8 2000 	streq.w	r2, [r8]
 8000c80:	605a      	strne	r2, [r3, #4]
 8000c82:	e7eb      	b.n	8000c5c <_malloc_r+0xa8>
 8000c84:	4623      	mov	r3, r4
 8000c86:	6864      	ldr	r4, [r4, #4]
 8000c88:	e7ae      	b.n	8000be8 <_malloc_r+0x34>
 8000c8a:	463c      	mov	r4, r7
 8000c8c:	687f      	ldr	r7, [r7, #4]
 8000c8e:	e7b6      	b.n	8000bfe <_malloc_r+0x4a>
 8000c90:	461a      	mov	r2, r3
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	d1fb      	bne.n	8000c90 <_malloc_r+0xdc>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	6053      	str	r3, [r2, #4]
 8000c9c:	e7de      	b.n	8000c5c <_malloc_r+0xa8>
 8000c9e:	230c      	movs	r3, #12
 8000ca0:	6033      	str	r3, [r6, #0]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	f000 f80c 	bl	8000cc0 <__malloc_unlock>
 8000ca8:	e794      	b.n	8000bd4 <_malloc_r+0x20>
 8000caa:	6005      	str	r5, [r0, #0]
 8000cac:	e7d6      	b.n	8000c5c <_malloc_r+0xa8>
 8000cae:	bf00      	nop
 8000cb0:	200001b8 	.word	0x200001b8

08000cb4 <__malloc_lock>:
 8000cb4:	4801      	ldr	r0, [pc, #4]	@ (8000cbc <__malloc_lock+0x8>)
 8000cb6:	f7ff bf0f 	b.w	8000ad8 <__retarget_lock_acquire_recursive>
 8000cba:	bf00      	nop
 8000cbc:	200001b0 	.word	0x200001b0

08000cc0 <__malloc_unlock>:
 8000cc0:	4801      	ldr	r0, [pc, #4]	@ (8000cc8 <__malloc_unlock+0x8>)
 8000cc2:	f7ff bf0a 	b.w	8000ada <__retarget_lock_release_recursive>
 8000cc6:	bf00      	nop
 8000cc8:	200001b0 	.word	0x200001b0

08000ccc <_sungetc_r>:
 8000ccc:	b538      	push	{r3, r4, r5, lr}
 8000cce:	1c4b      	adds	r3, r1, #1
 8000cd0:	4614      	mov	r4, r2
 8000cd2:	d103      	bne.n	8000cdc <_sungetc_r+0x10>
 8000cd4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000cd8:	4628      	mov	r0, r5
 8000cda:	bd38      	pop	{r3, r4, r5, pc}
 8000cdc:	8993      	ldrh	r3, [r2, #12]
 8000cde:	f023 0320 	bic.w	r3, r3, #32
 8000ce2:	8193      	strh	r3, [r2, #12]
 8000ce4:	6853      	ldr	r3, [r2, #4]
 8000ce6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000ce8:	b2cd      	uxtb	r5, r1
 8000cea:	b18a      	cbz	r2, 8000d10 <_sungetc_r+0x44>
 8000cec:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	dd08      	ble.n	8000d04 <_sungetc_r+0x38>
 8000cf2:	6823      	ldr	r3, [r4, #0]
 8000cf4:	1e5a      	subs	r2, r3, #1
 8000cf6:	6022      	str	r2, [r4, #0]
 8000cf8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8000cfc:	6863      	ldr	r3, [r4, #4]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	6063      	str	r3, [r4, #4]
 8000d02:	e7e9      	b.n	8000cd8 <_sungetc_r+0xc>
 8000d04:	4621      	mov	r1, r4
 8000d06:	f000 fb34 	bl	8001372 <__submore>
 8000d0a:	2800      	cmp	r0, #0
 8000d0c:	d0f1      	beq.n	8000cf2 <_sungetc_r+0x26>
 8000d0e:	e7e1      	b.n	8000cd4 <_sungetc_r+0x8>
 8000d10:	6921      	ldr	r1, [r4, #16]
 8000d12:	6822      	ldr	r2, [r4, #0]
 8000d14:	b141      	cbz	r1, 8000d28 <_sungetc_r+0x5c>
 8000d16:	4291      	cmp	r1, r2
 8000d18:	d206      	bcs.n	8000d28 <_sungetc_r+0x5c>
 8000d1a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8000d1e:	42a9      	cmp	r1, r5
 8000d20:	d102      	bne.n	8000d28 <_sungetc_r+0x5c>
 8000d22:	3a01      	subs	r2, #1
 8000d24:	6022      	str	r2, [r4, #0]
 8000d26:	e7ea      	b.n	8000cfe <_sungetc_r+0x32>
 8000d28:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8000d2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000d30:	6363      	str	r3, [r4, #52]	@ 0x34
 8000d32:	2303      	movs	r3, #3
 8000d34:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000d36:	4623      	mov	r3, r4
 8000d38:	f803 5f46 	strb.w	r5, [r3, #70]!
 8000d3c:	6023      	str	r3, [r4, #0]
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e7de      	b.n	8000d00 <_sungetc_r+0x34>

08000d42 <__ssrefill_r>:
 8000d42:	b510      	push	{r4, lr}
 8000d44:	460c      	mov	r4, r1
 8000d46:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8000d48:	b169      	cbz	r1, 8000d66 <__ssrefill_r+0x24>
 8000d4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	d001      	beq.n	8000d56 <__ssrefill_r+0x14>
 8000d52:	f7ff fec3 	bl	8000adc <_free_r>
 8000d56:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000d58:	6063      	str	r3, [r4, #4]
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	6360      	str	r0, [r4, #52]	@ 0x34
 8000d5e:	b113      	cbz	r3, 8000d66 <__ssrefill_r+0x24>
 8000d60:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000d62:	6023      	str	r3, [r4, #0]
 8000d64:	bd10      	pop	{r4, pc}
 8000d66:	6923      	ldr	r3, [r4, #16]
 8000d68:	6023      	str	r3, [r4, #0]
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	6063      	str	r3, [r4, #4]
 8000d6e:	89a3      	ldrh	r3, [r4, #12]
 8000d70:	f043 0320 	orr.w	r3, r3, #32
 8000d74:	81a3      	strh	r3, [r4, #12]
 8000d76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d7a:	e7f3      	b.n	8000d64 <__ssrefill_r+0x22>

08000d7c <__ssvfiscanf_r>:
 8000d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d80:	460c      	mov	r4, r1
 8000d82:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8000d86:	2100      	movs	r1, #0
 8000d88:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8000d8c:	49a5      	ldr	r1, [pc, #660]	@ (8001024 <__ssvfiscanf_r+0x2a8>)
 8000d8e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8000d90:	f10d 0804 	add.w	r8, sp, #4
 8000d94:	49a4      	ldr	r1, [pc, #656]	@ (8001028 <__ssvfiscanf_r+0x2ac>)
 8000d96:	4fa5      	ldr	r7, [pc, #660]	@ (800102c <__ssvfiscanf_r+0x2b0>)
 8000d98:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8000d9c:	4606      	mov	r6, r0
 8000d9e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	7813      	ldrb	r3, [r2, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f000 8158 	beq.w	800105a <__ssvfiscanf_r+0x2de>
 8000daa:	5cf9      	ldrb	r1, [r7, r3]
 8000dac:	f011 0108 	ands.w	r1, r1, #8
 8000db0:	f102 0501 	add.w	r5, r2, #1
 8000db4:	d019      	beq.n	8000dea <__ssvfiscanf_r+0x6e>
 8000db6:	6863      	ldr	r3, [r4, #4]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	dd0f      	ble.n	8000ddc <__ssvfiscanf_r+0x60>
 8000dbc:	6823      	ldr	r3, [r4, #0]
 8000dbe:	781a      	ldrb	r2, [r3, #0]
 8000dc0:	5cba      	ldrb	r2, [r7, r2]
 8000dc2:	0712      	lsls	r2, r2, #28
 8000dc4:	d401      	bmi.n	8000dca <__ssvfiscanf_r+0x4e>
 8000dc6:	462a      	mov	r2, r5
 8000dc8:	e7eb      	b.n	8000da2 <__ssvfiscanf_r+0x26>
 8000dca:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8000dcc:	3201      	adds	r2, #1
 8000dce:	9245      	str	r2, [sp, #276]	@ 0x114
 8000dd0:	6862      	ldr	r2, [r4, #4]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	6062      	str	r2, [r4, #4]
 8000dd8:	6023      	str	r3, [r4, #0]
 8000dda:	e7ec      	b.n	8000db6 <__ssvfiscanf_r+0x3a>
 8000ddc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000dde:	4621      	mov	r1, r4
 8000de0:	4630      	mov	r0, r6
 8000de2:	4798      	blx	r3
 8000de4:	2800      	cmp	r0, #0
 8000de6:	d0e9      	beq.n	8000dbc <__ssvfiscanf_r+0x40>
 8000de8:	e7ed      	b.n	8000dc6 <__ssvfiscanf_r+0x4a>
 8000dea:	2b25      	cmp	r3, #37	@ 0x25
 8000dec:	d012      	beq.n	8000e14 <__ssvfiscanf_r+0x98>
 8000dee:	4699      	mov	r9, r3
 8000df0:	6863      	ldr	r3, [r4, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f340 8093 	ble.w	8000f1e <__ssvfiscanf_r+0x1a2>
 8000df8:	6822      	ldr	r2, [r4, #0]
 8000dfa:	7813      	ldrb	r3, [r2, #0]
 8000dfc:	454b      	cmp	r3, r9
 8000dfe:	f040 812c 	bne.w	800105a <__ssvfiscanf_r+0x2de>
 8000e02:	6863      	ldr	r3, [r4, #4]
 8000e04:	3b01      	subs	r3, #1
 8000e06:	6063      	str	r3, [r4, #4]
 8000e08:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8000e0a:	3201      	adds	r2, #1
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	6022      	str	r2, [r4, #0]
 8000e10:	9345      	str	r3, [sp, #276]	@ 0x114
 8000e12:	e7d8      	b.n	8000dc6 <__ssvfiscanf_r+0x4a>
 8000e14:	9141      	str	r1, [sp, #260]	@ 0x104
 8000e16:	9143      	str	r1, [sp, #268]	@ 0x10c
 8000e18:	7853      	ldrb	r3, [r2, #1]
 8000e1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e1c:	bf02      	ittt	eq
 8000e1e:	2310      	moveq	r3, #16
 8000e20:	1c95      	addeq	r5, r2, #2
 8000e22:	9341      	streq	r3, [sp, #260]	@ 0x104
 8000e24:	220a      	movs	r2, #10
 8000e26:	46a9      	mov	r9, r5
 8000e28:	f819 1b01 	ldrb.w	r1, [r9], #1
 8000e2c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8000e30:	2b09      	cmp	r3, #9
 8000e32:	d91e      	bls.n	8000e72 <__ssvfiscanf_r+0xf6>
 8000e34:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8001030 <__ssvfiscanf_r+0x2b4>
 8000e38:	2203      	movs	r2, #3
 8000e3a:	4650      	mov	r0, sl
 8000e3c:	f7ff f9d0 	bl	80001e0 <memchr>
 8000e40:	b138      	cbz	r0, 8000e52 <__ssvfiscanf_r+0xd6>
 8000e42:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000e44:	eba0 000a 	sub.w	r0, r0, sl
 8000e48:	2301      	movs	r3, #1
 8000e4a:	4083      	lsls	r3, r0
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	9341      	str	r3, [sp, #260]	@ 0x104
 8000e50:	464d      	mov	r5, r9
 8000e52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000e56:	2b78      	cmp	r3, #120	@ 0x78
 8000e58:	d806      	bhi.n	8000e68 <__ssvfiscanf_r+0xec>
 8000e5a:	2b57      	cmp	r3, #87	@ 0x57
 8000e5c:	d810      	bhi.n	8000e80 <__ssvfiscanf_r+0x104>
 8000e5e:	2b25      	cmp	r3, #37	@ 0x25
 8000e60:	d0c5      	beq.n	8000dee <__ssvfiscanf_r+0x72>
 8000e62:	d857      	bhi.n	8000f14 <__ssvfiscanf_r+0x198>
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d065      	beq.n	8000f34 <__ssvfiscanf_r+0x1b8>
 8000e68:	2303      	movs	r3, #3
 8000e6a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8000e6c:	230a      	movs	r3, #10
 8000e6e:	9342      	str	r3, [sp, #264]	@ 0x108
 8000e70:	e078      	b.n	8000f64 <__ssvfiscanf_r+0x1e8>
 8000e72:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8000e74:	fb02 1103 	mla	r1, r2, r3, r1
 8000e78:	3930      	subs	r1, #48	@ 0x30
 8000e7a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8000e7c:	464d      	mov	r5, r9
 8000e7e:	e7d2      	b.n	8000e26 <__ssvfiscanf_r+0xaa>
 8000e80:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8000e84:	2a20      	cmp	r2, #32
 8000e86:	d8ef      	bhi.n	8000e68 <__ssvfiscanf_r+0xec>
 8000e88:	a101      	add	r1, pc, #4	@ (adr r1, 8000e90 <__ssvfiscanf_r+0x114>)
 8000e8a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8000e8e:	bf00      	nop
 8000e90:	08000f43 	.word	0x08000f43
 8000e94:	08000e69 	.word	0x08000e69
 8000e98:	08000e69 	.word	0x08000e69
 8000e9c:	08000f9d 	.word	0x08000f9d
 8000ea0:	08000e69 	.word	0x08000e69
 8000ea4:	08000e69 	.word	0x08000e69
 8000ea8:	08000e69 	.word	0x08000e69
 8000eac:	08000e69 	.word	0x08000e69
 8000eb0:	08000e69 	.word	0x08000e69
 8000eb4:	08000e69 	.word	0x08000e69
 8000eb8:	08000e69 	.word	0x08000e69
 8000ebc:	08000fb3 	.word	0x08000fb3
 8000ec0:	08000f99 	.word	0x08000f99
 8000ec4:	08000f1b 	.word	0x08000f1b
 8000ec8:	08000f1b 	.word	0x08000f1b
 8000ecc:	08000f1b 	.word	0x08000f1b
 8000ed0:	08000e69 	.word	0x08000e69
 8000ed4:	08000f55 	.word	0x08000f55
 8000ed8:	08000e69 	.word	0x08000e69
 8000edc:	08000e69 	.word	0x08000e69
 8000ee0:	08000e69 	.word	0x08000e69
 8000ee4:	08000e69 	.word	0x08000e69
 8000ee8:	08000fc3 	.word	0x08000fc3
 8000eec:	08000f5d 	.word	0x08000f5d
 8000ef0:	08000f3b 	.word	0x08000f3b
 8000ef4:	08000e69 	.word	0x08000e69
 8000ef8:	08000e69 	.word	0x08000e69
 8000efc:	08000fbf 	.word	0x08000fbf
 8000f00:	08000e69 	.word	0x08000e69
 8000f04:	08000f99 	.word	0x08000f99
 8000f08:	08000e69 	.word	0x08000e69
 8000f0c:	08000e69 	.word	0x08000e69
 8000f10:	08000f43 	.word	0x08000f43
 8000f14:	3b45      	subs	r3, #69	@ 0x45
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d8a6      	bhi.n	8000e68 <__ssvfiscanf_r+0xec>
 8000f1a:	2305      	movs	r3, #5
 8000f1c:	e021      	b.n	8000f62 <__ssvfiscanf_r+0x1e6>
 8000f1e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000f20:	4621      	mov	r1, r4
 8000f22:	4630      	mov	r0, r6
 8000f24:	4798      	blx	r3
 8000f26:	2800      	cmp	r0, #0
 8000f28:	f43f af66 	beq.w	8000df8 <__ssvfiscanf_r+0x7c>
 8000f2c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8000f2e:	2800      	cmp	r0, #0
 8000f30:	f040 808b 	bne.w	800104a <__ssvfiscanf_r+0x2ce>
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f38:	e08b      	b.n	8001052 <__ssvfiscanf_r+0x2d6>
 8000f3a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000f3c:	f042 0220 	orr.w	r2, r2, #32
 8000f40:	9241      	str	r2, [sp, #260]	@ 0x104
 8000f42:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000f44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f48:	9241      	str	r2, [sp, #260]	@ 0x104
 8000f4a:	2210      	movs	r2, #16
 8000f4c:	2b6e      	cmp	r3, #110	@ 0x6e
 8000f4e:	9242      	str	r2, [sp, #264]	@ 0x108
 8000f50:	d902      	bls.n	8000f58 <__ssvfiscanf_r+0x1dc>
 8000f52:	e005      	b.n	8000f60 <__ssvfiscanf_r+0x1e4>
 8000f54:	2300      	movs	r3, #0
 8000f56:	9342      	str	r3, [sp, #264]	@ 0x108
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e002      	b.n	8000f62 <__ssvfiscanf_r+0x1e6>
 8000f5c:	2308      	movs	r3, #8
 8000f5e:	9342      	str	r3, [sp, #264]	@ 0x108
 8000f60:	2304      	movs	r3, #4
 8000f62:	9347      	str	r3, [sp, #284]	@ 0x11c
 8000f64:	6863      	ldr	r3, [r4, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	dd39      	ble.n	8000fde <__ssvfiscanf_r+0x262>
 8000f6a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000f6c:	0659      	lsls	r1, r3, #25
 8000f6e:	d404      	bmi.n	8000f7a <__ssvfiscanf_r+0x1fe>
 8000f70:	6823      	ldr	r3, [r4, #0]
 8000f72:	781a      	ldrb	r2, [r3, #0]
 8000f74:	5cba      	ldrb	r2, [r7, r2]
 8000f76:	0712      	lsls	r2, r2, #28
 8000f78:	d438      	bmi.n	8000fec <__ssvfiscanf_r+0x270>
 8000f7a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	dc47      	bgt.n	8001010 <__ssvfiscanf_r+0x294>
 8000f80:	466b      	mov	r3, sp
 8000f82:	4622      	mov	r2, r4
 8000f84:	a941      	add	r1, sp, #260	@ 0x104
 8000f86:	4630      	mov	r0, r6
 8000f88:	f000 f86c 	bl	8001064 <_scanf_chars>
 8000f8c:	2801      	cmp	r0, #1
 8000f8e:	d064      	beq.n	800105a <__ssvfiscanf_r+0x2de>
 8000f90:	2802      	cmp	r0, #2
 8000f92:	f47f af18 	bne.w	8000dc6 <__ssvfiscanf_r+0x4a>
 8000f96:	e7c9      	b.n	8000f2c <__ssvfiscanf_r+0x1b0>
 8000f98:	220a      	movs	r2, #10
 8000f9a:	e7d7      	b.n	8000f4c <__ssvfiscanf_r+0x1d0>
 8000f9c:	4629      	mov	r1, r5
 8000f9e:	4640      	mov	r0, r8
 8000fa0:	f000 f9ae 	bl	8001300 <__sccl>
 8000fa4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000fa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000faa:	9341      	str	r3, [sp, #260]	@ 0x104
 8000fac:	4605      	mov	r5, r0
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e7d7      	b.n	8000f62 <__ssvfiscanf_r+0x1e6>
 8000fb2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000fb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fb8:	9341      	str	r3, [sp, #260]	@ 0x104
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e7d1      	b.n	8000f62 <__ssvfiscanf_r+0x1e6>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e7cf      	b.n	8000f62 <__ssvfiscanf_r+0x1e6>
 8000fc2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8000fc4:	06c3      	lsls	r3, r0, #27
 8000fc6:	f53f aefe 	bmi.w	8000dc6 <__ssvfiscanf_r+0x4a>
 8000fca:	9b00      	ldr	r3, [sp, #0]
 8000fcc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8000fce:	1d19      	adds	r1, r3, #4
 8000fd0:	9100      	str	r1, [sp, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	07c0      	lsls	r0, r0, #31
 8000fd6:	bf4c      	ite	mi
 8000fd8:	801a      	strhmi	r2, [r3, #0]
 8000fda:	601a      	strpl	r2, [r3, #0]
 8000fdc:	e6f3      	b.n	8000dc6 <__ssvfiscanf_r+0x4a>
 8000fde:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000fe0:	4621      	mov	r1, r4
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	4798      	blx	r3
 8000fe6:	2800      	cmp	r0, #0
 8000fe8:	d0bf      	beq.n	8000f6a <__ssvfiscanf_r+0x1ee>
 8000fea:	e79f      	b.n	8000f2c <__ssvfiscanf_r+0x1b0>
 8000fec:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8000fee:	3201      	adds	r2, #1
 8000ff0:	9245      	str	r2, [sp, #276]	@ 0x114
 8000ff2:	6862      	ldr	r2, [r4, #4]
 8000ff4:	3a01      	subs	r2, #1
 8000ff6:	2a00      	cmp	r2, #0
 8000ff8:	6062      	str	r2, [r4, #4]
 8000ffa:	dd02      	ble.n	8001002 <__ssvfiscanf_r+0x286>
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	6023      	str	r3, [r4, #0]
 8001000:	e7b6      	b.n	8000f70 <__ssvfiscanf_r+0x1f4>
 8001002:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8001004:	4621      	mov	r1, r4
 8001006:	4630      	mov	r0, r6
 8001008:	4798      	blx	r3
 800100a:	2800      	cmp	r0, #0
 800100c:	d0b0      	beq.n	8000f70 <__ssvfiscanf_r+0x1f4>
 800100e:	e78d      	b.n	8000f2c <__ssvfiscanf_r+0x1b0>
 8001010:	2b04      	cmp	r3, #4
 8001012:	dc0f      	bgt.n	8001034 <__ssvfiscanf_r+0x2b8>
 8001014:	466b      	mov	r3, sp
 8001016:	4622      	mov	r2, r4
 8001018:	a941      	add	r1, sp, #260	@ 0x104
 800101a:	4630      	mov	r0, r6
 800101c:	f000 f87c 	bl	8001118 <_scanf_i>
 8001020:	e7b4      	b.n	8000f8c <__ssvfiscanf_r+0x210>
 8001022:	bf00      	nop
 8001024:	08000ccd 	.word	0x08000ccd
 8001028:	08000d43 	.word	0x08000d43
 800102c:	08001710 	.word	0x08001710
 8001030:	080016f0 	.word	0x080016f0
 8001034:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <__ssvfiscanf_r+0x2e4>)
 8001036:	2b00      	cmp	r3, #0
 8001038:	f43f aec5 	beq.w	8000dc6 <__ssvfiscanf_r+0x4a>
 800103c:	466b      	mov	r3, sp
 800103e:	4622      	mov	r2, r4
 8001040:	a941      	add	r1, sp, #260	@ 0x104
 8001042:	4630      	mov	r0, r6
 8001044:	f3af 8000 	nop.w
 8001048:	e7a0      	b.n	8000f8c <__ssvfiscanf_r+0x210>
 800104a:	89a3      	ldrh	r3, [r4, #12]
 800104c:	065b      	lsls	r3, r3, #25
 800104e:	f53f af71 	bmi.w	8000f34 <__ssvfiscanf_r+0x1b8>
 8001052:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8001056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800105a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800105c:	e7f9      	b.n	8001052 <__ssvfiscanf_r+0x2d6>
 800105e:	bf00      	nop
 8001060:	00000000 	.word	0x00000000

08001064 <_scanf_chars>:
 8001064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001068:	4615      	mov	r5, r2
 800106a:	688a      	ldr	r2, [r1, #8]
 800106c:	4680      	mov	r8, r0
 800106e:	460c      	mov	r4, r1
 8001070:	b932      	cbnz	r2, 8001080 <_scanf_chars+0x1c>
 8001072:	698a      	ldr	r2, [r1, #24]
 8001074:	2a00      	cmp	r2, #0
 8001076:	bf14      	ite	ne
 8001078:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800107c:	2201      	moveq	r2, #1
 800107e:	608a      	str	r2, [r1, #8]
 8001080:	6822      	ldr	r2, [r4, #0]
 8001082:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8001114 <_scanf_chars+0xb0>
 8001086:	06d1      	lsls	r1, r2, #27
 8001088:	bf5f      	itttt	pl
 800108a:	681a      	ldrpl	r2, [r3, #0]
 800108c:	1d11      	addpl	r1, r2, #4
 800108e:	6019      	strpl	r1, [r3, #0]
 8001090:	6816      	ldrpl	r6, [r2, #0]
 8001092:	2700      	movs	r7, #0
 8001094:	69a0      	ldr	r0, [r4, #24]
 8001096:	b188      	cbz	r0, 80010bc <_scanf_chars+0x58>
 8001098:	2801      	cmp	r0, #1
 800109a:	d107      	bne.n	80010ac <_scanf_chars+0x48>
 800109c:	682b      	ldr	r3, [r5, #0]
 800109e:	781a      	ldrb	r2, [r3, #0]
 80010a0:	6963      	ldr	r3, [r4, #20]
 80010a2:	5c9b      	ldrb	r3, [r3, r2]
 80010a4:	b953      	cbnz	r3, 80010bc <_scanf_chars+0x58>
 80010a6:	2f00      	cmp	r7, #0
 80010a8:	d031      	beq.n	800110e <_scanf_chars+0xaa>
 80010aa:	e022      	b.n	80010f2 <_scanf_chars+0x8e>
 80010ac:	2802      	cmp	r0, #2
 80010ae:	d120      	bne.n	80010f2 <_scanf_chars+0x8e>
 80010b0:	682b      	ldr	r3, [r5, #0]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80010b8:	071b      	lsls	r3, r3, #28
 80010ba:	d41a      	bmi.n	80010f2 <_scanf_chars+0x8e>
 80010bc:	6823      	ldr	r3, [r4, #0]
 80010be:	06da      	lsls	r2, r3, #27
 80010c0:	bf5e      	ittt	pl
 80010c2:	682b      	ldrpl	r3, [r5, #0]
 80010c4:	781b      	ldrbpl	r3, [r3, #0]
 80010c6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80010ca:	682a      	ldr	r2, [r5, #0]
 80010cc:	686b      	ldr	r3, [r5, #4]
 80010ce:	3201      	adds	r2, #1
 80010d0:	602a      	str	r2, [r5, #0]
 80010d2:	68a2      	ldr	r2, [r4, #8]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	3a01      	subs	r2, #1
 80010d8:	606b      	str	r3, [r5, #4]
 80010da:	3701      	adds	r7, #1
 80010dc:	60a2      	str	r2, [r4, #8]
 80010de:	b142      	cbz	r2, 80010f2 <_scanf_chars+0x8e>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	dcd7      	bgt.n	8001094 <_scanf_chars+0x30>
 80010e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80010e8:	4629      	mov	r1, r5
 80010ea:	4640      	mov	r0, r8
 80010ec:	4798      	blx	r3
 80010ee:	2800      	cmp	r0, #0
 80010f0:	d0d0      	beq.n	8001094 <_scanf_chars+0x30>
 80010f2:	6823      	ldr	r3, [r4, #0]
 80010f4:	f013 0310 	ands.w	r3, r3, #16
 80010f8:	d105      	bne.n	8001106 <_scanf_chars+0xa2>
 80010fa:	68e2      	ldr	r2, [r4, #12]
 80010fc:	3201      	adds	r2, #1
 80010fe:	60e2      	str	r2, [r4, #12]
 8001100:	69a2      	ldr	r2, [r4, #24]
 8001102:	b102      	cbz	r2, 8001106 <_scanf_chars+0xa2>
 8001104:	7033      	strb	r3, [r6, #0]
 8001106:	6923      	ldr	r3, [r4, #16]
 8001108:	443b      	add	r3, r7
 800110a:	6123      	str	r3, [r4, #16]
 800110c:	2000      	movs	r0, #0
 800110e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001112:	bf00      	nop
 8001114:	08001710 	.word	0x08001710

08001118 <_scanf_i>:
 8001118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800111c:	4698      	mov	r8, r3
 800111e:	4b74      	ldr	r3, [pc, #464]	@ (80012f0 <_scanf_i+0x1d8>)
 8001120:	460c      	mov	r4, r1
 8001122:	4682      	mov	sl, r0
 8001124:	4616      	mov	r6, r2
 8001126:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800112a:	b087      	sub	sp, #28
 800112c:	ab03      	add	r3, sp, #12
 800112e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001132:	4b70      	ldr	r3, [pc, #448]	@ (80012f4 <_scanf_i+0x1dc>)
 8001134:	69a1      	ldr	r1, [r4, #24]
 8001136:	4a70      	ldr	r2, [pc, #448]	@ (80012f8 <_scanf_i+0x1e0>)
 8001138:	2903      	cmp	r1, #3
 800113a:	bf08      	it	eq
 800113c:	461a      	moveq	r2, r3
 800113e:	68a3      	ldr	r3, [r4, #8]
 8001140:	9201      	str	r2, [sp, #4]
 8001142:	1e5a      	subs	r2, r3, #1
 8001144:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8001148:	bf88      	it	hi
 800114a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800114e:	4627      	mov	r7, r4
 8001150:	bf82      	ittt	hi
 8001152:	eb03 0905 	addhi.w	r9, r3, r5
 8001156:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800115a:	60a3      	strhi	r3, [r4, #8]
 800115c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8001160:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8001164:	bf98      	it	ls
 8001166:	f04f 0900 	movls.w	r9, #0
 800116a:	6023      	str	r3, [r4, #0]
 800116c:	463d      	mov	r5, r7
 800116e:	f04f 0b00 	mov.w	fp, #0
 8001172:	6831      	ldr	r1, [r6, #0]
 8001174:	ab03      	add	r3, sp, #12
 8001176:	7809      	ldrb	r1, [r1, #0]
 8001178:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800117c:	2202      	movs	r2, #2
 800117e:	f7ff f82f 	bl	80001e0 <memchr>
 8001182:	b328      	cbz	r0, 80011d0 <_scanf_i+0xb8>
 8001184:	f1bb 0f01 	cmp.w	fp, #1
 8001188:	d159      	bne.n	800123e <_scanf_i+0x126>
 800118a:	6862      	ldr	r2, [r4, #4]
 800118c:	b92a      	cbnz	r2, 800119a <_scanf_i+0x82>
 800118e:	6822      	ldr	r2, [r4, #0]
 8001190:	2108      	movs	r1, #8
 8001192:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001196:	6061      	str	r1, [r4, #4]
 8001198:	6022      	str	r2, [r4, #0]
 800119a:	6822      	ldr	r2, [r4, #0]
 800119c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80011a0:	6022      	str	r2, [r4, #0]
 80011a2:	68a2      	ldr	r2, [r4, #8]
 80011a4:	1e51      	subs	r1, r2, #1
 80011a6:	60a1      	str	r1, [r4, #8]
 80011a8:	b192      	cbz	r2, 80011d0 <_scanf_i+0xb8>
 80011aa:	6832      	ldr	r2, [r6, #0]
 80011ac:	1c51      	adds	r1, r2, #1
 80011ae:	6031      	str	r1, [r6, #0]
 80011b0:	7812      	ldrb	r2, [r2, #0]
 80011b2:	f805 2b01 	strb.w	r2, [r5], #1
 80011b6:	6872      	ldr	r2, [r6, #4]
 80011b8:	3a01      	subs	r2, #1
 80011ba:	2a00      	cmp	r2, #0
 80011bc:	6072      	str	r2, [r6, #4]
 80011be:	dc07      	bgt.n	80011d0 <_scanf_i+0xb8>
 80011c0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80011c4:	4631      	mov	r1, r6
 80011c6:	4650      	mov	r0, sl
 80011c8:	4790      	blx	r2
 80011ca:	2800      	cmp	r0, #0
 80011cc:	f040 8085 	bne.w	80012da <_scanf_i+0x1c2>
 80011d0:	f10b 0b01 	add.w	fp, fp, #1
 80011d4:	f1bb 0f03 	cmp.w	fp, #3
 80011d8:	d1cb      	bne.n	8001172 <_scanf_i+0x5a>
 80011da:	6863      	ldr	r3, [r4, #4]
 80011dc:	b90b      	cbnz	r3, 80011e2 <_scanf_i+0xca>
 80011de:	230a      	movs	r3, #10
 80011e0:	6063      	str	r3, [r4, #4]
 80011e2:	6863      	ldr	r3, [r4, #4]
 80011e4:	4945      	ldr	r1, [pc, #276]	@ (80012fc <_scanf_i+0x1e4>)
 80011e6:	6960      	ldr	r0, [r4, #20]
 80011e8:	1ac9      	subs	r1, r1, r3
 80011ea:	f000 f889 	bl	8001300 <__sccl>
 80011ee:	f04f 0b00 	mov.w	fp, #0
 80011f2:	68a3      	ldr	r3, [r4, #8]
 80011f4:	6822      	ldr	r2, [r4, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d03d      	beq.n	8001276 <_scanf_i+0x15e>
 80011fa:	6831      	ldr	r1, [r6, #0]
 80011fc:	6960      	ldr	r0, [r4, #20]
 80011fe:	f891 c000 	ldrb.w	ip, [r1]
 8001202:	f810 000c 	ldrb.w	r0, [r0, ip]
 8001206:	2800      	cmp	r0, #0
 8001208:	d035      	beq.n	8001276 <_scanf_i+0x15e>
 800120a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800120e:	d124      	bne.n	800125a <_scanf_i+0x142>
 8001210:	0510      	lsls	r0, r2, #20
 8001212:	d522      	bpl.n	800125a <_scanf_i+0x142>
 8001214:	f10b 0b01 	add.w	fp, fp, #1
 8001218:	f1b9 0f00 	cmp.w	r9, #0
 800121c:	d003      	beq.n	8001226 <_scanf_i+0x10e>
 800121e:	3301      	adds	r3, #1
 8001220:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8001224:	60a3      	str	r3, [r4, #8]
 8001226:	6873      	ldr	r3, [r6, #4]
 8001228:	3b01      	subs	r3, #1
 800122a:	2b00      	cmp	r3, #0
 800122c:	6073      	str	r3, [r6, #4]
 800122e:	dd1b      	ble.n	8001268 <_scanf_i+0x150>
 8001230:	6833      	ldr	r3, [r6, #0]
 8001232:	3301      	adds	r3, #1
 8001234:	6033      	str	r3, [r6, #0]
 8001236:	68a3      	ldr	r3, [r4, #8]
 8001238:	3b01      	subs	r3, #1
 800123a:	60a3      	str	r3, [r4, #8]
 800123c:	e7d9      	b.n	80011f2 <_scanf_i+0xda>
 800123e:	f1bb 0f02 	cmp.w	fp, #2
 8001242:	d1ae      	bne.n	80011a2 <_scanf_i+0x8a>
 8001244:	6822      	ldr	r2, [r4, #0]
 8001246:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800124a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800124e:	d1bf      	bne.n	80011d0 <_scanf_i+0xb8>
 8001250:	2110      	movs	r1, #16
 8001252:	6061      	str	r1, [r4, #4]
 8001254:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001258:	e7a2      	b.n	80011a0 <_scanf_i+0x88>
 800125a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800125e:	6022      	str	r2, [r4, #0]
 8001260:	780b      	ldrb	r3, [r1, #0]
 8001262:	f805 3b01 	strb.w	r3, [r5], #1
 8001266:	e7de      	b.n	8001226 <_scanf_i+0x10e>
 8001268:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800126c:	4631      	mov	r1, r6
 800126e:	4650      	mov	r0, sl
 8001270:	4798      	blx	r3
 8001272:	2800      	cmp	r0, #0
 8001274:	d0df      	beq.n	8001236 <_scanf_i+0x11e>
 8001276:	6823      	ldr	r3, [r4, #0]
 8001278:	05d9      	lsls	r1, r3, #23
 800127a:	d50d      	bpl.n	8001298 <_scanf_i+0x180>
 800127c:	42bd      	cmp	r5, r7
 800127e:	d909      	bls.n	8001294 <_scanf_i+0x17c>
 8001280:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8001284:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8001288:	4632      	mov	r2, r6
 800128a:	4650      	mov	r0, sl
 800128c:	4798      	blx	r3
 800128e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8001292:	464d      	mov	r5, r9
 8001294:	42bd      	cmp	r5, r7
 8001296:	d028      	beq.n	80012ea <_scanf_i+0x1d2>
 8001298:	6822      	ldr	r2, [r4, #0]
 800129a:	f012 0210 	ands.w	r2, r2, #16
 800129e:	d113      	bne.n	80012c8 <_scanf_i+0x1b0>
 80012a0:	702a      	strb	r2, [r5, #0]
 80012a2:	6863      	ldr	r3, [r4, #4]
 80012a4:	9e01      	ldr	r6, [sp, #4]
 80012a6:	4639      	mov	r1, r7
 80012a8:	4650      	mov	r0, sl
 80012aa:	47b0      	blx	r6
 80012ac:	f8d8 3000 	ldr.w	r3, [r8]
 80012b0:	6821      	ldr	r1, [r4, #0]
 80012b2:	1d1a      	adds	r2, r3, #4
 80012b4:	f8c8 2000 	str.w	r2, [r8]
 80012b8:	f011 0f20 	tst.w	r1, #32
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	d00f      	beq.n	80012e0 <_scanf_i+0x1c8>
 80012c0:	6018      	str	r0, [r3, #0]
 80012c2:	68e3      	ldr	r3, [r4, #12]
 80012c4:	3301      	adds	r3, #1
 80012c6:	60e3      	str	r3, [r4, #12]
 80012c8:	6923      	ldr	r3, [r4, #16]
 80012ca:	1bed      	subs	r5, r5, r7
 80012cc:	445d      	add	r5, fp
 80012ce:	442b      	add	r3, r5
 80012d0:	6123      	str	r3, [r4, #16]
 80012d2:	2000      	movs	r0, #0
 80012d4:	b007      	add	sp, #28
 80012d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012da:	f04f 0b00 	mov.w	fp, #0
 80012de:	e7ca      	b.n	8001276 <_scanf_i+0x15e>
 80012e0:	07ca      	lsls	r2, r1, #31
 80012e2:	bf4c      	ite	mi
 80012e4:	8018      	strhmi	r0, [r3, #0]
 80012e6:	6018      	strpl	r0, [r3, #0]
 80012e8:	e7eb      	b.n	80012c2 <_scanf_i+0x1aa>
 80012ea:	2001      	movs	r0, #1
 80012ec:	e7f2      	b.n	80012d4 <_scanf_i+0x1bc>
 80012ee:	bf00      	nop
 80012f0:	080016e4 	.word	0x080016e4
 80012f4:	08001575 	.word	0x08001575
 80012f8:	08001655 	.word	0x08001655
 80012fc:	08001704 	.word	0x08001704

08001300 <__sccl>:
 8001300:	b570      	push	{r4, r5, r6, lr}
 8001302:	780b      	ldrb	r3, [r1, #0]
 8001304:	4604      	mov	r4, r0
 8001306:	2b5e      	cmp	r3, #94	@ 0x5e
 8001308:	bf0b      	itete	eq
 800130a:	784b      	ldrbeq	r3, [r1, #1]
 800130c:	1c4a      	addne	r2, r1, #1
 800130e:	1c8a      	addeq	r2, r1, #2
 8001310:	2100      	movne	r1, #0
 8001312:	bf08      	it	eq
 8001314:	2101      	moveq	r1, #1
 8001316:	3801      	subs	r0, #1
 8001318:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800131c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8001320:	42a8      	cmp	r0, r5
 8001322:	d1fb      	bne.n	800131c <__sccl+0x1c>
 8001324:	b90b      	cbnz	r3, 800132a <__sccl+0x2a>
 8001326:	1e50      	subs	r0, r2, #1
 8001328:	bd70      	pop	{r4, r5, r6, pc}
 800132a:	f081 0101 	eor.w	r1, r1, #1
 800132e:	54e1      	strb	r1, [r4, r3]
 8001330:	4610      	mov	r0, r2
 8001332:	4602      	mov	r2, r0
 8001334:	f812 5b01 	ldrb.w	r5, [r2], #1
 8001338:	2d2d      	cmp	r5, #45	@ 0x2d
 800133a:	d005      	beq.n	8001348 <__sccl+0x48>
 800133c:	2d5d      	cmp	r5, #93	@ 0x5d
 800133e:	d016      	beq.n	800136e <__sccl+0x6e>
 8001340:	2d00      	cmp	r5, #0
 8001342:	d0f1      	beq.n	8001328 <__sccl+0x28>
 8001344:	462b      	mov	r3, r5
 8001346:	e7f2      	b.n	800132e <__sccl+0x2e>
 8001348:	7846      	ldrb	r6, [r0, #1]
 800134a:	2e5d      	cmp	r6, #93	@ 0x5d
 800134c:	d0fa      	beq.n	8001344 <__sccl+0x44>
 800134e:	42b3      	cmp	r3, r6
 8001350:	dcf8      	bgt.n	8001344 <__sccl+0x44>
 8001352:	3002      	adds	r0, #2
 8001354:	461a      	mov	r2, r3
 8001356:	3201      	adds	r2, #1
 8001358:	4296      	cmp	r6, r2
 800135a:	54a1      	strb	r1, [r4, r2]
 800135c:	dcfb      	bgt.n	8001356 <__sccl+0x56>
 800135e:	1af2      	subs	r2, r6, r3
 8001360:	3a01      	subs	r2, #1
 8001362:	1c5d      	adds	r5, r3, #1
 8001364:	42b3      	cmp	r3, r6
 8001366:	bfa8      	it	ge
 8001368:	2200      	movge	r2, #0
 800136a:	18ab      	adds	r3, r5, r2
 800136c:	e7e1      	b.n	8001332 <__sccl+0x32>
 800136e:	4610      	mov	r0, r2
 8001370:	e7da      	b.n	8001328 <__sccl+0x28>

08001372 <__submore>:
 8001372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001376:	460c      	mov	r4, r1
 8001378:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800137a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800137e:	4299      	cmp	r1, r3
 8001380:	d11d      	bne.n	80013be <__submore+0x4c>
 8001382:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001386:	f7ff fc15 	bl	8000bb4 <_malloc_r>
 800138a:	b918      	cbnz	r0, 8001394 <__submore+0x22>
 800138c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001394:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001398:	63a3      	str	r3, [r4, #56]	@ 0x38
 800139a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800139e:	6360      	str	r0, [r4, #52]	@ 0x34
 80013a0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80013a4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80013a8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80013ac:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80013b0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80013b4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80013b8:	6020      	str	r0, [r4, #0]
 80013ba:	2000      	movs	r0, #0
 80013bc:	e7e8      	b.n	8001390 <__submore+0x1e>
 80013be:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80013c0:	0077      	lsls	r7, r6, #1
 80013c2:	463a      	mov	r2, r7
 80013c4:	f000 f82e 	bl	8001424 <_realloc_r>
 80013c8:	4605      	mov	r5, r0
 80013ca:	2800      	cmp	r0, #0
 80013cc:	d0de      	beq.n	800138c <__submore+0x1a>
 80013ce:	eb00 0806 	add.w	r8, r0, r6
 80013d2:	4601      	mov	r1, r0
 80013d4:	4632      	mov	r2, r6
 80013d6:	4640      	mov	r0, r8
 80013d8:	f000 f816 	bl	8001408 <memcpy>
 80013dc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80013e0:	f8c4 8000 	str.w	r8, [r4]
 80013e4:	e7e9      	b.n	80013ba <__submore+0x48>
	...

080013e8 <_sbrk_r>:
 80013e8:	b538      	push	{r3, r4, r5, lr}
 80013ea:	4d06      	ldr	r5, [pc, #24]	@ (8001404 <_sbrk_r+0x1c>)
 80013ec:	2300      	movs	r3, #0
 80013ee:	4604      	mov	r4, r0
 80013f0:	4608      	mov	r0, r1
 80013f2:	602b      	str	r3, [r5, #0]
 80013f4:	f7ff f9a6 	bl	8000744 <_sbrk>
 80013f8:	1c43      	adds	r3, r0, #1
 80013fa:	d102      	bne.n	8001402 <_sbrk_r+0x1a>
 80013fc:	682b      	ldr	r3, [r5, #0]
 80013fe:	b103      	cbz	r3, 8001402 <_sbrk_r+0x1a>
 8001400:	6023      	str	r3, [r4, #0]
 8001402:	bd38      	pop	{r3, r4, r5, pc}
 8001404:	200001ac 	.word	0x200001ac

08001408 <memcpy>:
 8001408:	440a      	add	r2, r1
 800140a:	4291      	cmp	r1, r2
 800140c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001410:	d100      	bne.n	8001414 <memcpy+0xc>
 8001412:	4770      	bx	lr
 8001414:	b510      	push	{r4, lr}
 8001416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800141a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800141e:	4291      	cmp	r1, r2
 8001420:	d1f9      	bne.n	8001416 <memcpy+0xe>
 8001422:	bd10      	pop	{r4, pc}

08001424 <_realloc_r>:
 8001424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001428:	4680      	mov	r8, r0
 800142a:	4615      	mov	r5, r2
 800142c:	460c      	mov	r4, r1
 800142e:	b921      	cbnz	r1, 800143a <_realloc_r+0x16>
 8001430:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001434:	4611      	mov	r1, r2
 8001436:	f7ff bbbd 	b.w	8000bb4 <_malloc_r>
 800143a:	b92a      	cbnz	r2, 8001448 <_realloc_r+0x24>
 800143c:	f7ff fb4e 	bl	8000adc <_free_r>
 8001440:	2400      	movs	r4, #0
 8001442:	4620      	mov	r0, r4
 8001444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001448:	f000 f906 	bl	8001658 <_malloc_usable_size_r>
 800144c:	4285      	cmp	r5, r0
 800144e:	4606      	mov	r6, r0
 8001450:	d802      	bhi.n	8001458 <_realloc_r+0x34>
 8001452:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001456:	d8f4      	bhi.n	8001442 <_realloc_r+0x1e>
 8001458:	4629      	mov	r1, r5
 800145a:	4640      	mov	r0, r8
 800145c:	f7ff fbaa 	bl	8000bb4 <_malloc_r>
 8001460:	4607      	mov	r7, r0
 8001462:	2800      	cmp	r0, #0
 8001464:	d0ec      	beq.n	8001440 <_realloc_r+0x1c>
 8001466:	42b5      	cmp	r5, r6
 8001468:	462a      	mov	r2, r5
 800146a:	4621      	mov	r1, r4
 800146c:	bf28      	it	cs
 800146e:	4632      	movcs	r2, r6
 8001470:	f7ff ffca 	bl	8001408 <memcpy>
 8001474:	4621      	mov	r1, r4
 8001476:	4640      	mov	r0, r8
 8001478:	f7ff fb30 	bl	8000adc <_free_r>
 800147c:	463c      	mov	r4, r7
 800147e:	e7e0      	b.n	8001442 <_realloc_r+0x1e>

08001480 <_strtol_l.constprop.0>:
 8001480:	2b24      	cmp	r3, #36	@ 0x24
 8001482:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001486:	4686      	mov	lr, r0
 8001488:	4690      	mov	r8, r2
 800148a:	d801      	bhi.n	8001490 <_strtol_l.constprop.0+0x10>
 800148c:	2b01      	cmp	r3, #1
 800148e:	d106      	bne.n	800149e <_strtol_l.constprop.0+0x1e>
 8001490:	f7ff faf8 	bl	8000a84 <__errno>
 8001494:	2316      	movs	r3, #22
 8001496:	6003      	str	r3, [r0, #0]
 8001498:	2000      	movs	r0, #0
 800149a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800149e:	4834      	ldr	r0, [pc, #208]	@ (8001570 <_strtol_l.constprop.0+0xf0>)
 80014a0:	460d      	mov	r5, r1
 80014a2:	462a      	mov	r2, r5
 80014a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80014a8:	5d06      	ldrb	r6, [r0, r4]
 80014aa:	f016 0608 	ands.w	r6, r6, #8
 80014ae:	d1f8      	bne.n	80014a2 <_strtol_l.constprop.0+0x22>
 80014b0:	2c2d      	cmp	r4, #45	@ 0x2d
 80014b2:	d12d      	bne.n	8001510 <_strtol_l.constprop.0+0x90>
 80014b4:	782c      	ldrb	r4, [r5, #0]
 80014b6:	2601      	movs	r6, #1
 80014b8:	1c95      	adds	r5, r2, #2
 80014ba:	f033 0210 	bics.w	r2, r3, #16
 80014be:	d109      	bne.n	80014d4 <_strtol_l.constprop.0+0x54>
 80014c0:	2c30      	cmp	r4, #48	@ 0x30
 80014c2:	d12a      	bne.n	800151a <_strtol_l.constprop.0+0x9a>
 80014c4:	782a      	ldrb	r2, [r5, #0]
 80014c6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80014ca:	2a58      	cmp	r2, #88	@ 0x58
 80014cc:	d125      	bne.n	800151a <_strtol_l.constprop.0+0x9a>
 80014ce:	786c      	ldrb	r4, [r5, #1]
 80014d0:	2310      	movs	r3, #16
 80014d2:	3502      	adds	r5, #2
 80014d4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80014d8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80014dc:	2200      	movs	r2, #0
 80014de:	fbbc f9f3 	udiv	r9, ip, r3
 80014e2:	4610      	mov	r0, r2
 80014e4:	fb03 ca19 	mls	sl, r3, r9, ip
 80014e8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80014ec:	2f09      	cmp	r7, #9
 80014ee:	d81b      	bhi.n	8001528 <_strtol_l.constprop.0+0xa8>
 80014f0:	463c      	mov	r4, r7
 80014f2:	42a3      	cmp	r3, r4
 80014f4:	dd27      	ble.n	8001546 <_strtol_l.constprop.0+0xc6>
 80014f6:	1c57      	adds	r7, r2, #1
 80014f8:	d007      	beq.n	800150a <_strtol_l.constprop.0+0x8a>
 80014fa:	4581      	cmp	r9, r0
 80014fc:	d320      	bcc.n	8001540 <_strtol_l.constprop.0+0xc0>
 80014fe:	d101      	bne.n	8001504 <_strtol_l.constprop.0+0x84>
 8001500:	45a2      	cmp	sl, r4
 8001502:	db1d      	blt.n	8001540 <_strtol_l.constprop.0+0xc0>
 8001504:	fb00 4003 	mla	r0, r0, r3, r4
 8001508:	2201      	movs	r2, #1
 800150a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800150e:	e7eb      	b.n	80014e8 <_strtol_l.constprop.0+0x68>
 8001510:	2c2b      	cmp	r4, #43	@ 0x2b
 8001512:	bf04      	itt	eq
 8001514:	782c      	ldrbeq	r4, [r5, #0]
 8001516:	1c95      	addeq	r5, r2, #2
 8001518:	e7cf      	b.n	80014ba <_strtol_l.constprop.0+0x3a>
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1da      	bne.n	80014d4 <_strtol_l.constprop.0+0x54>
 800151e:	2c30      	cmp	r4, #48	@ 0x30
 8001520:	bf0c      	ite	eq
 8001522:	2308      	moveq	r3, #8
 8001524:	230a      	movne	r3, #10
 8001526:	e7d5      	b.n	80014d4 <_strtol_l.constprop.0+0x54>
 8001528:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800152c:	2f19      	cmp	r7, #25
 800152e:	d801      	bhi.n	8001534 <_strtol_l.constprop.0+0xb4>
 8001530:	3c37      	subs	r4, #55	@ 0x37
 8001532:	e7de      	b.n	80014f2 <_strtol_l.constprop.0+0x72>
 8001534:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8001538:	2f19      	cmp	r7, #25
 800153a:	d804      	bhi.n	8001546 <_strtol_l.constprop.0+0xc6>
 800153c:	3c57      	subs	r4, #87	@ 0x57
 800153e:	e7d8      	b.n	80014f2 <_strtol_l.constprop.0+0x72>
 8001540:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001544:	e7e1      	b.n	800150a <_strtol_l.constprop.0+0x8a>
 8001546:	1c53      	adds	r3, r2, #1
 8001548:	d108      	bne.n	800155c <_strtol_l.constprop.0+0xdc>
 800154a:	2322      	movs	r3, #34	@ 0x22
 800154c:	f8ce 3000 	str.w	r3, [lr]
 8001550:	4660      	mov	r0, ip
 8001552:	f1b8 0f00 	cmp.w	r8, #0
 8001556:	d0a0      	beq.n	800149a <_strtol_l.constprop.0+0x1a>
 8001558:	1e69      	subs	r1, r5, #1
 800155a:	e006      	b.n	800156a <_strtol_l.constprop.0+0xea>
 800155c:	b106      	cbz	r6, 8001560 <_strtol_l.constprop.0+0xe0>
 800155e:	4240      	negs	r0, r0
 8001560:	f1b8 0f00 	cmp.w	r8, #0
 8001564:	d099      	beq.n	800149a <_strtol_l.constprop.0+0x1a>
 8001566:	2a00      	cmp	r2, #0
 8001568:	d1f6      	bne.n	8001558 <_strtol_l.constprop.0+0xd8>
 800156a:	f8c8 1000 	str.w	r1, [r8]
 800156e:	e794      	b.n	800149a <_strtol_l.constprop.0+0x1a>
 8001570:	08001710 	.word	0x08001710

08001574 <_strtol_r>:
 8001574:	f7ff bf84 	b.w	8001480 <_strtol_l.constprop.0>

08001578 <_strtoul_l.constprop.0>:
 8001578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800157c:	4e34      	ldr	r6, [pc, #208]	@ (8001650 <_strtoul_l.constprop.0+0xd8>)
 800157e:	4686      	mov	lr, r0
 8001580:	460d      	mov	r5, r1
 8001582:	4628      	mov	r0, r5
 8001584:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001588:	5d37      	ldrb	r7, [r6, r4]
 800158a:	f017 0708 	ands.w	r7, r7, #8
 800158e:	d1f8      	bne.n	8001582 <_strtoul_l.constprop.0+0xa>
 8001590:	2c2d      	cmp	r4, #45	@ 0x2d
 8001592:	d12f      	bne.n	80015f4 <_strtoul_l.constprop.0+0x7c>
 8001594:	782c      	ldrb	r4, [r5, #0]
 8001596:	2701      	movs	r7, #1
 8001598:	1c85      	adds	r5, r0, #2
 800159a:	f033 0010 	bics.w	r0, r3, #16
 800159e:	d109      	bne.n	80015b4 <_strtoul_l.constprop.0+0x3c>
 80015a0:	2c30      	cmp	r4, #48	@ 0x30
 80015a2:	d12c      	bne.n	80015fe <_strtoul_l.constprop.0+0x86>
 80015a4:	7828      	ldrb	r0, [r5, #0]
 80015a6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80015aa:	2858      	cmp	r0, #88	@ 0x58
 80015ac:	d127      	bne.n	80015fe <_strtoul_l.constprop.0+0x86>
 80015ae:	786c      	ldrb	r4, [r5, #1]
 80015b0:	2310      	movs	r3, #16
 80015b2:	3502      	adds	r5, #2
 80015b4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80015b8:	2600      	movs	r6, #0
 80015ba:	fbb8 f8f3 	udiv	r8, r8, r3
 80015be:	fb03 f908 	mul.w	r9, r3, r8
 80015c2:	ea6f 0909 	mvn.w	r9, r9
 80015c6:	4630      	mov	r0, r6
 80015c8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80015cc:	f1bc 0f09 	cmp.w	ip, #9
 80015d0:	d81c      	bhi.n	800160c <_strtoul_l.constprop.0+0x94>
 80015d2:	4664      	mov	r4, ip
 80015d4:	42a3      	cmp	r3, r4
 80015d6:	dd2a      	ble.n	800162e <_strtoul_l.constprop.0+0xb6>
 80015d8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80015dc:	d007      	beq.n	80015ee <_strtoul_l.constprop.0+0x76>
 80015de:	4580      	cmp	r8, r0
 80015e0:	d322      	bcc.n	8001628 <_strtoul_l.constprop.0+0xb0>
 80015e2:	d101      	bne.n	80015e8 <_strtoul_l.constprop.0+0x70>
 80015e4:	45a1      	cmp	r9, r4
 80015e6:	db1f      	blt.n	8001628 <_strtoul_l.constprop.0+0xb0>
 80015e8:	fb00 4003 	mla	r0, r0, r3, r4
 80015ec:	2601      	movs	r6, #1
 80015ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80015f2:	e7e9      	b.n	80015c8 <_strtoul_l.constprop.0+0x50>
 80015f4:	2c2b      	cmp	r4, #43	@ 0x2b
 80015f6:	bf04      	itt	eq
 80015f8:	782c      	ldrbeq	r4, [r5, #0]
 80015fa:	1c85      	addeq	r5, r0, #2
 80015fc:	e7cd      	b.n	800159a <_strtoul_l.constprop.0+0x22>
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1d8      	bne.n	80015b4 <_strtoul_l.constprop.0+0x3c>
 8001602:	2c30      	cmp	r4, #48	@ 0x30
 8001604:	bf0c      	ite	eq
 8001606:	2308      	moveq	r3, #8
 8001608:	230a      	movne	r3, #10
 800160a:	e7d3      	b.n	80015b4 <_strtoul_l.constprop.0+0x3c>
 800160c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8001610:	f1bc 0f19 	cmp.w	ip, #25
 8001614:	d801      	bhi.n	800161a <_strtoul_l.constprop.0+0xa2>
 8001616:	3c37      	subs	r4, #55	@ 0x37
 8001618:	e7dc      	b.n	80015d4 <_strtoul_l.constprop.0+0x5c>
 800161a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800161e:	f1bc 0f19 	cmp.w	ip, #25
 8001622:	d804      	bhi.n	800162e <_strtoul_l.constprop.0+0xb6>
 8001624:	3c57      	subs	r4, #87	@ 0x57
 8001626:	e7d5      	b.n	80015d4 <_strtoul_l.constprop.0+0x5c>
 8001628:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800162c:	e7df      	b.n	80015ee <_strtoul_l.constprop.0+0x76>
 800162e:	1c73      	adds	r3, r6, #1
 8001630:	d106      	bne.n	8001640 <_strtoul_l.constprop.0+0xc8>
 8001632:	2322      	movs	r3, #34	@ 0x22
 8001634:	f8ce 3000 	str.w	r3, [lr]
 8001638:	4630      	mov	r0, r6
 800163a:	b932      	cbnz	r2, 800164a <_strtoul_l.constprop.0+0xd2>
 800163c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001640:	b107      	cbz	r7, 8001644 <_strtoul_l.constprop.0+0xcc>
 8001642:	4240      	negs	r0, r0
 8001644:	2a00      	cmp	r2, #0
 8001646:	d0f9      	beq.n	800163c <_strtoul_l.constprop.0+0xc4>
 8001648:	b106      	cbz	r6, 800164c <_strtoul_l.constprop.0+0xd4>
 800164a:	1e69      	subs	r1, r5, #1
 800164c:	6011      	str	r1, [r2, #0]
 800164e:	e7f5      	b.n	800163c <_strtoul_l.constprop.0+0xc4>
 8001650:	08001710 	.word	0x08001710

08001654 <_strtoul_r>:
 8001654:	f7ff bf90 	b.w	8001578 <_strtoul_l.constprop.0>

08001658 <_malloc_usable_size_r>:
 8001658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800165c:	1f18      	subs	r0, r3, #4
 800165e:	2b00      	cmp	r3, #0
 8001660:	bfbc      	itt	lt
 8001662:	580b      	ldrlt	r3, [r1, r0]
 8001664:	18c0      	addlt	r0, r0, r3
 8001666:	4770      	bx	lr

08001668 <_init>:
 8001668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800166a:	bf00      	nop
 800166c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800166e:	bc08      	pop	{r3}
 8001670:	469e      	mov	lr, r3
 8001672:	4770      	bx	lr

08001674 <_fini>:
 8001674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001676:	bf00      	nop
 8001678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800167a:	bc08      	pop	{r3}
 800167c:	469e      	mov	lr, r3
 800167e:	4770      	bx	lr
